# coding: utf-8

"""
    Unit API V3

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class MeasurementMap(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'from_namespace': 'str',
        'measurement_map_item_count': 'int',
        'measurement_map_items': 'list[MeasurementMapItem]',
        'to_namespace': 'str'
    }

    attribute_map = {
        'from_namespace': 'fromNamespace',
        'measurement_map_item_count': 'measurementMapItemCount',
        'measurement_map_items': 'measurementMapItems',
        'to_namespace': 'toNamespace'
    }

    def __init__(self, from_namespace=None, measurement_map_item_count=None, measurement_map_items=None, to_namespace=None):
        """
        MeasurementMap - a model defined in Swagger
        """

        self._from_namespace = None
        self._measurement_map_item_count = None
        self._measurement_map_items = None
        self._to_namespace = None

        if from_namespace is not None:
          self.from_namespace = from_namespace
        if measurement_map_item_count is not None:
          self.measurement_map_item_count = measurement_map_item_count
        if measurement_map_items is not None:
          self.measurement_map_items = measurement_map_items
        if to_namespace is not None:
          self.to_namespace = to_namespace

    @property
    def from_namespace(self):
        """
        Gets the from_namespace of this MeasurementMap.

        :return: The from_namespace of this MeasurementMap.
        :rtype: str
        """
        return self._from_namespace

    @from_namespace.setter
    def from_namespace(self, from_namespace):
        """
        Sets the from_namespace of this MeasurementMap.

        :param from_namespace: The from_namespace of this MeasurementMap.
        :type: str
        """

        self._from_namespace = from_namespace

    @property
    def measurement_map_item_count(self):
        """
        Gets the measurement_map_item_count of this MeasurementMap.

        :return: The measurement_map_item_count of this MeasurementMap.
        :rtype: int
        """
        return self._measurement_map_item_count

    @measurement_map_item_count.setter
    def measurement_map_item_count(self, measurement_map_item_count):
        """
        Sets the measurement_map_item_count of this MeasurementMap.

        :param measurement_map_item_count: The measurement_map_item_count of this MeasurementMap.
        :type: int
        """

        self._measurement_map_item_count = measurement_map_item_count

    @property
    def measurement_map_items(self):
        """
        Gets the measurement_map_items of this MeasurementMap.

        :return: The measurement_map_items of this MeasurementMap.
        :rtype: list[MeasurementMapItem]
        """
        return self._measurement_map_items

    @measurement_map_items.setter
    def measurement_map_items(self, measurement_map_items):
        """
        Sets the measurement_map_items of this MeasurementMap.

        :param measurement_map_items: The measurement_map_items of this MeasurementMap.
        :type: list[MeasurementMapItem]
        """

        self._measurement_map_items = measurement_map_items

    @property
    def to_namespace(self):
        """
        Gets the to_namespace of this MeasurementMap.

        :return: The to_namespace of this MeasurementMap.
        :rtype: str
        """
        return self._to_namespace

    @to_namespace.setter
    def to_namespace(self, to_namespace):
        """
        Sets the to_namespace of this MeasurementMap.

        :param to_namespace: The to_namespace of this MeasurementMap.
        :type: str
        """

        self._to_namespace = to_namespace

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, MeasurementMap):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
