# coding: utf-8

"""
    Unit API V3

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class UnitAssignment(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'last_modified': 'str',
        'measurement': 'Measurement',
        'unit': 'Unit'
    }

    attribute_map = {
        'last_modified': 'lastModified',
        'measurement': 'measurement',
        'unit': 'unit'
    }

    def __init__(self, last_modified=None, measurement=None, unit=None):
        """
        UnitAssignment - a model defined in Swagger
        """

        self._last_modified = None
        self._measurement = None
        self._unit = None

        if last_modified is not None:
          self.last_modified = last_modified
        if measurement is not None:
          self.measurement = measurement
        if unit is not None:
          self.unit = unit

    @property
    def last_modified(self):
        """
        Gets the last_modified of this UnitAssignment.

        :return: The last_modified of this UnitAssignment.
        :rtype: str
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """
        Sets the last_modified of this UnitAssignment.

        :param last_modified: The last_modified of this UnitAssignment.
        :type: str
        """

        self._last_modified = last_modified

    @property
    def measurement(self):
        """
        Gets the measurement of this UnitAssignment.

        :return: The measurement of this UnitAssignment.
        :rtype: Measurement
        """
        return self._measurement

    @measurement.setter
    def measurement(self, measurement):
        """
        Sets the measurement of this UnitAssignment.

        :param measurement: The measurement of this UnitAssignment.
        :type: Measurement
        """

        self._measurement = measurement

    @property
    def unit(self):
        """
        Gets the unit of this UnitAssignment.

        :return: The unit of this UnitAssignment.
        :rtype: Unit
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """
        Sets the unit of this UnitAssignment.

        :param unit: The unit of this UnitAssignment.
        :type: Unit
        """

        self._unit = unit

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, UnitAssignment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
