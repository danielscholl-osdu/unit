# coding: utf-8

"""
    Unit API V3

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Measurement(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'base_measurement': 'bool',
        'base_measurement_essence_json': 'str',
        'child_measurement_essence_jsons': 'list[str]',
        'code': 'str',
        'deprecation_info': 'MeasurementDeprecationInfo',
        'description': 'str',
        'dimension_analysis': 'str',
        'dimension_code': 'str',
        'essence': 'MeasurementEssence',
        'essence_json': 'str',
        'last_modified': 'str',
        'name': 'str',
        'namespace': 'str',
        'parent_essence_json': 'str',
        'preferred_unit_essence_jsons': 'list[str]',
        'unit_essence_jsons': 'list[str]',
        'unit_quantity_code': 'str'
    }

    attribute_map = {
        'base_measurement': 'baseMeasurement',
        'base_measurement_essence_json': 'baseMeasurementEssenceJson',
        'child_measurement_essence_jsons': 'childMeasurementEssenceJsons',
        'code': 'code',
        'deprecation_info': 'deprecationInfo',
        'description': 'description',
        'dimension_analysis': 'dimensionAnalysis',
        'dimension_code': 'dimensionCode',
        'essence': 'essence',
        'essence_json': 'essenceJson',
        'last_modified': 'lastModified',
        'name': 'name',
        'namespace': 'namespace',
        'parent_essence_json': 'parentEssenceJson',
        'preferred_unit_essence_jsons': 'preferredUnitEssenceJsons',
        'unit_essence_jsons': 'unitEssenceJsons',
        'unit_quantity_code': 'unitQuantityCode'
    }

    def __init__(self, base_measurement=None, base_measurement_essence_json=None, child_measurement_essence_jsons=None, code=None, deprecation_info=None, description=None, dimension_analysis=None, dimension_code=None, essence=None, essence_json=None, last_modified=None, name=None, namespace=None, parent_essence_json=None, preferred_unit_essence_jsons=None, unit_essence_jsons=None, unit_quantity_code=None):
        """
        Measurement - a model defined in Swagger
        """

        self._base_measurement = None
        self._base_measurement_essence_json = None
        self._child_measurement_essence_jsons = None
        self._code = None
        self._deprecation_info = None
        self._description = None
        self._dimension_analysis = None
        self._dimension_code = None
        self._essence = None
        self._essence_json = None
        self._last_modified = None
        self._name = None
        self._namespace = None
        self._parent_essence_json = None
        self._preferred_unit_essence_jsons = None
        self._unit_essence_jsons = None
        self._unit_quantity_code = None

        if base_measurement is not None:
          self.base_measurement = base_measurement
        if base_measurement_essence_json is not None:
          self.base_measurement_essence_json = base_measurement_essence_json
        if child_measurement_essence_jsons is not None:
          self.child_measurement_essence_jsons = child_measurement_essence_jsons
        if code is not None:
          self.code = code
        if deprecation_info is not None:
          self.deprecation_info = deprecation_info
        if description is not None:
          self.description = description
        if dimension_analysis is not None:
          self.dimension_analysis = dimension_analysis
        if dimension_code is not None:
          self.dimension_code = dimension_code
        if essence is not None:
          self.essence = essence
        if essence_json is not None:
          self.essence_json = essence_json
        if last_modified is not None:
          self.last_modified = last_modified
        if name is not None:
          self.name = name
        if namespace is not None:
          self.namespace = namespace
        if parent_essence_json is not None:
          self.parent_essence_json = parent_essence_json
        if preferred_unit_essence_jsons is not None:
          self.preferred_unit_essence_jsons = preferred_unit_essence_jsons
        if unit_essence_jsons is not None:
          self.unit_essence_jsons = unit_essence_jsons
        if unit_quantity_code is not None:
          self.unit_quantity_code = unit_quantity_code

    @property
    def base_measurement(self):
        """
        Gets the base_measurement of this Measurement.

        :return: The base_measurement of this Measurement.
        :rtype: bool
        """
        return self._base_measurement

    @base_measurement.setter
    def base_measurement(self, base_measurement):
        """
        Sets the base_measurement of this Measurement.

        :param base_measurement: The base_measurement of this Measurement.
        :type: bool
        """

        self._base_measurement = base_measurement

    @property
    def base_measurement_essence_json(self):
        """
        Gets the base_measurement_essence_json of this Measurement.

        :return: The base_measurement_essence_json of this Measurement.
        :rtype: str
        """
        return self._base_measurement_essence_json

    @base_measurement_essence_json.setter
    def base_measurement_essence_json(self, base_measurement_essence_json):
        """
        Sets the base_measurement_essence_json of this Measurement.

        :param base_measurement_essence_json: The base_measurement_essence_json of this Measurement.
        :type: str
        """

        self._base_measurement_essence_json = base_measurement_essence_json

    @property
    def child_measurement_essence_jsons(self):
        """
        Gets the child_measurement_essence_jsons of this Measurement.

        :return: The child_measurement_essence_jsons of this Measurement.
        :rtype: list[str]
        """
        return self._child_measurement_essence_jsons

    @child_measurement_essence_jsons.setter
    def child_measurement_essence_jsons(self, child_measurement_essence_jsons):
        """
        Sets the child_measurement_essence_jsons of this Measurement.

        :param child_measurement_essence_jsons: The child_measurement_essence_jsons of this Measurement.
        :type: list[str]
        """

        self._child_measurement_essence_jsons = child_measurement_essence_jsons

    @property
    def code(self):
        """
        Gets the code of this Measurement.

        :return: The code of this Measurement.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """
        Sets the code of this Measurement.

        :param code: The code of this Measurement.
        :type: str
        """

        self._code = code

    @property
    def deprecation_info(self):
        """
        Gets the deprecation_info of this Measurement.

        :return: The deprecation_info of this Measurement.
        :rtype: MeasurementDeprecationInfo
        """
        return self._deprecation_info

    @deprecation_info.setter
    def deprecation_info(self, deprecation_info):
        """
        Sets the deprecation_info of this Measurement.

        :param deprecation_info: The deprecation_info of this Measurement.
        :type: MeasurementDeprecationInfo
        """

        self._deprecation_info = deprecation_info

    @property
    def description(self):
        """
        Gets the description of this Measurement.

        :return: The description of this Measurement.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Measurement.

        :param description: The description of this Measurement.
        :type: str
        """

        self._description = description

    @property
    def dimension_analysis(self):
        """
        Gets the dimension_analysis of this Measurement.

        :return: The dimension_analysis of this Measurement.
        :rtype: str
        """
        return self._dimension_analysis

    @dimension_analysis.setter
    def dimension_analysis(self, dimension_analysis):
        """
        Sets the dimension_analysis of this Measurement.

        :param dimension_analysis: The dimension_analysis of this Measurement.
        :type: str
        """

        self._dimension_analysis = dimension_analysis

    @property
    def dimension_code(self):
        """
        Gets the dimension_code of this Measurement.

        :return: The dimension_code of this Measurement.
        :rtype: str
        """
        return self._dimension_code

    @dimension_code.setter
    def dimension_code(self, dimension_code):
        """
        Sets the dimension_code of this Measurement.

        :param dimension_code: The dimension_code of this Measurement.
        :type: str
        """

        self._dimension_code = dimension_code

    @property
    def essence(self):
        """
        Gets the essence of this Measurement.

        :return: The essence of this Measurement.
        :rtype: MeasurementEssence
        """
        return self._essence

    @essence.setter
    def essence(self, essence):
        """
        Sets the essence of this Measurement.

        :param essence: The essence of this Measurement.
        :type: MeasurementEssence
        """

        self._essence = essence

    @property
    def essence_json(self):
        """
        Gets the essence_json of this Measurement.

        :return: The essence_json of this Measurement.
        :rtype: str
        """
        return self._essence_json

    @essence_json.setter
    def essence_json(self, essence_json):
        """
        Sets the essence_json of this Measurement.

        :param essence_json: The essence_json of this Measurement.
        :type: str
        """

        self._essence_json = essence_json

    @property
    def last_modified(self):
        """
        Gets the last_modified of this Measurement.

        :return: The last_modified of this Measurement.
        :rtype: str
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """
        Sets the last_modified of this Measurement.

        :param last_modified: The last_modified of this Measurement.
        :type: str
        """

        self._last_modified = last_modified

    @property
    def name(self):
        """
        Gets the name of this Measurement.

        :return: The name of this Measurement.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Measurement.

        :param name: The name of this Measurement.
        :type: str
        """

        self._name = name

    @property
    def namespace(self):
        """
        Gets the namespace of this Measurement.

        :return: The namespace of this Measurement.
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """
        Sets the namespace of this Measurement.

        :param namespace: The namespace of this Measurement.
        :type: str
        """

        self._namespace = namespace

    @property
    def parent_essence_json(self):
        """
        Gets the parent_essence_json of this Measurement.

        :return: The parent_essence_json of this Measurement.
        :rtype: str
        """
        return self._parent_essence_json

    @parent_essence_json.setter
    def parent_essence_json(self, parent_essence_json):
        """
        Sets the parent_essence_json of this Measurement.

        :param parent_essence_json: The parent_essence_json of this Measurement.
        :type: str
        """

        self._parent_essence_json = parent_essence_json

    @property
    def preferred_unit_essence_jsons(self):
        """
        Gets the preferred_unit_essence_jsons of this Measurement.

        :return: The preferred_unit_essence_jsons of this Measurement.
        :rtype: list[str]
        """
        return self._preferred_unit_essence_jsons

    @preferred_unit_essence_jsons.setter
    def preferred_unit_essence_jsons(self, preferred_unit_essence_jsons):
        """
        Sets the preferred_unit_essence_jsons of this Measurement.

        :param preferred_unit_essence_jsons: The preferred_unit_essence_jsons of this Measurement.
        :type: list[str]
        """

        self._preferred_unit_essence_jsons = preferred_unit_essence_jsons

    @property
    def unit_essence_jsons(self):
        """
        Gets the unit_essence_jsons of this Measurement.

        :return: The unit_essence_jsons of this Measurement.
        :rtype: list[str]
        """
        return self._unit_essence_jsons

    @unit_essence_jsons.setter
    def unit_essence_jsons(self, unit_essence_jsons):
        """
        Sets the unit_essence_jsons of this Measurement.

        :param unit_essence_jsons: The unit_essence_jsons of this Measurement.
        :type: list[str]
        """

        self._unit_essence_jsons = unit_essence_jsons

    @property
    def unit_quantity_code(self):
        """
        Gets the unit_quantity_code of this Measurement.

        :return: The unit_quantity_code of this Measurement.
        :rtype: str
        """
        return self._unit_quantity_code

    @unit_quantity_code.setter
    def unit_quantity_code(self, unit_quantity_code):
        """
        Sets the unit_quantity_code of this Measurement.

        :param unit_quantity_code: The unit_quantity_code of this Measurement.
        :type: str
        """

        self._unit_quantity_code = unit_quantity_code

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Measurement):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
