# coding: utf-8

"""
    Unit API V3

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class UnitSystemInfoResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'count': 'int',
        'offset': 'int',
        'total_count': 'int',
        'unit_system_info_list': 'list[UnitSystemInfo]'
    }

    attribute_map = {
        'count': 'count',
        'offset': 'offset',
        'total_count': 'totalCount',
        'unit_system_info_list': 'unitSystemInfoList'
    }

    def __init__(self, count=None, offset=None, total_count=None, unit_system_info_list=None):
        """
        UnitSystemInfoResponse - a model defined in Swagger
        """

        self._count = None
        self._offset = None
        self._total_count = None
        self._unit_system_info_list = None

        if count is not None:
          self.count = count
        if offset is not None:
          self.offset = offset
        if total_count is not None:
          self.total_count = total_count
        if unit_system_info_list is not None:
          self.unit_system_info_list = unit_system_info_list

    @property
    def count(self):
        """
        Gets the count of this UnitSystemInfoResponse.

        :return: The count of this UnitSystemInfoResponse.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """
        Sets the count of this UnitSystemInfoResponse.

        :param count: The count of this UnitSystemInfoResponse.
        :type: int
        """

        self._count = count

    @property
    def offset(self):
        """
        Gets the offset of this UnitSystemInfoResponse.

        :return: The offset of this UnitSystemInfoResponse.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """
        Sets the offset of this UnitSystemInfoResponse.

        :param offset: The offset of this UnitSystemInfoResponse.
        :type: int
        """

        self._offset = offset

    @property
    def total_count(self):
        """
        Gets the total_count of this UnitSystemInfoResponse.

        :return: The total_count of this UnitSystemInfoResponse.
        :rtype: int
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count):
        """
        Sets the total_count of this UnitSystemInfoResponse.

        :param total_count: The total_count of this UnitSystemInfoResponse.
        :type: int
        """

        self._total_count = total_count

    @property
    def unit_system_info_list(self):
        """
        Gets the unit_system_info_list of this UnitSystemInfoResponse.

        :return: The unit_system_info_list of this UnitSystemInfoResponse.
        :rtype: list[UnitSystemInfo]
        """
        return self._unit_system_info_list

    @unit_system_info_list.setter
    def unit_system_info_list(self, unit_system_info_list):
        """
        Sets the unit_system_info_list of this UnitSystemInfoResponse.

        :param unit_system_info_list: The unit_system_info_list of this UnitSystemInfoResponse.
        :type: list[UnitSystemInfo]
        """

        self._unit_system_info_list = unit_system_info_list

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, UnitSystemInfoResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
