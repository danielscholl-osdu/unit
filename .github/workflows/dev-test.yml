name: Template Testing

on:
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  test-initialization:
    name: Test Template Initialization
    runs-on: ubuntu-latest
    if: github.repository == 'danielscholl-osdu/osdu-fork-template'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Test Environment
        run: |
          # Create a temporary test repository structure
          mkdir -p /tmp/test-template
          cp -r . /tmp/test-template/
          cd /tmp/test-template
          
          # Remove .git to simulate fresh template creation
          rm -rf .git
          git init
          git config user.name "Test User"
          git config user.email "test@example.com"
          git add .
          git commit -m "Initial template commit"
          
      - name: Test Workflow YAML Syntax
        run: |
          cd /tmp/test-template
          
          # Test all workflows for YAML syntax
          for workflow in .github/workflows/*.yml .github/template-workflows/*.yml; do
            echo "Testing YAML syntax: $workflow"
            if ! yq e '.' "$workflow" >/dev/null 2>&1; then
              echo "❌ YAML syntax error in $workflow"
              exit 1
            fi
          done
          echo "✅ All workflow YAML files are valid"
          
      - name: Test Sync Configuration
        run: |
          cd /tmp/test-template
          
          # Validate sync configuration structure
          if ! jq empty .github/sync-config.json; then
            echo "❌ Invalid sync-config.json"
            exit 1
          fi
          
          # Check that essential workflows are defined
          essential_workflows=$(jq -r '.sync_rules.workflows.essential[]?.path // empty' .github/sync-config.json)
          for workflow in $essential_workflows; do
            if [ ! -f "$workflow" ]; then
              echo "❌ Essential workflow missing: $workflow"
              exit 1
            fi
          done
          echo "✅ Sync configuration is valid"
          
      - name: Test Labels Configuration
        run: |
          cd /tmp/test-template
          
          # Validate labels configuration
          if ! jq empty .github/labels.json; then
            echo "❌ Invalid labels.json"
            exit 1
          fi
          
          # Check that labels are properly structured (labels.json is for fork repos)
          label_count=$(jq -r '.labels | length' .github/labels.json)
          if [ "$label_count" -lt 1 ]; then
            echo "❌ No labels defined in configuration"
            exit 1
          fi
          
          # Validate label structure (each label should have name, description, color)
          invalid_labels=$(jq -r '.labels[] | select(.name == null or .description == null or .color == null) | .name // "unnamed"' .github/labels.json)
          if [ -n "$invalid_labels" ]; then
            echo "❌ Invalid label structure found: $invalid_labels"
            exit 1
          fi
          
          echo "✅ Labels configuration is valid (found $label_count labels for fork repositories)"

  test-documentation:
    name: Test Documentation
    runs-on: ubuntu-latest
    if: github.repository == 'danielscholl-osdu/osdu-fork-template'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Check Documentation Completeness
        run: |
          echo "Checking documentation completeness..."
          
          # Check that all ADRs are indexed
          adr_files=$(find doc/adr -name "[0-9][0-9][0-9]-*.md" | wc -l)
          indexed_adrs=$(grep -c "^\- \[ADR-" doc/adr/index.md || echo 0)
          
          if [ "$adr_files" -ne "$indexed_adrs" ]; then
            echo "❌ Not all ADRs are indexed. Found $adr_files files but $indexed_adrs indexed"
            exit 1
          fi
          echo "✅ All ADRs are properly indexed"
          
      - name: Validate Markdown Links
        run: |
          echo "Checking for broken markdown links..."
          
          # Simple check for markdown links that point to non-existent files
          find doc -name "*.md" -exec grep -l "\](.*\.md)" {} \; | while read -r file; do
            echo "Checking links in $file"
            grep -o "\](.*\.md)" "$file" | sed 's/](\(.*\))/\1/' | while read -r link; do
              # Convert relative links to absolute paths
              if [[ "$link" == /* ]]; then
                target_file="$link"
              else
                target_file="$(dirname "$file")/$link"
              fi
              
              if [ ! -f "$target_file" ]; then
                echo "❌ Broken link in $file: $link"
              fi
            done
          done
          echo "✅ Markdown link validation complete"