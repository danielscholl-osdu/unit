
# Maven
# Build your Java project and run tests with Apache Maven.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

trigger:
  branches:
    include:
      - kuber-migration
  paths:
    exclude:
      - README.md
      - .gitignore

pool:
  name: Hosted Ubuntu 1604
  demands: maven

variables:
  osProjectName: unit
  buildMavenModules: $(osProjectName)-core,provider/$(osProjectName)-gcp/unit-gke
  dockerDir: provider/$(osProjectName)-gcp/unit-gke/docker
  imageName: os-$(osProjectName)-app
  unitCatalogsImageName: unit-catalogs
  tag: $(Build.BuildNumber)
  devIntRepository: gcr.io/opendes/
  sourceImageName: $(devIntRepository)$(imageName)
  sourceUnitCatalogsImageName: $(devIntRepository)$(unitCatalogsImageName)
  deploymentName: os-$(osProjectName)-service
  mavenSettings: ./maven/settings.xml
  integrationTestsDir: testing/unit_test_gcp
  unitCatalogsDir: data



  integrationTestCorePom: testing/$(osProjectName)-test-core/pom.xml
  integrationTestGcpPom: testing/$(osProjectName)-test-gcp/pom.xml

stages:
  - stage: Build_Push_DeployToDev
    variables:
    - group: 'GKE_DEVINT_INTEGRATION_TESTS'
    - group: 'GKE_UNIT_INTEGRATION_TESTS'
    - group: 'GKE_CICD_FEED_TOKEN'
    jobs:
      - job: Build_Push_DeployToDev
        steps:

          - task: DownloadSecureFile@1
            name: gcrKey
            inputs:
              secureFile: cicd-push-image-to-cr-keyfile.json

          - task: DownloadSecureFile@1
            name: kuberConfig
            inputs:
              secureFile: kubeconfig

          - task: Maven@3
            displayName: 'Build unit-core'
            inputs:
              mavenPomFile: 'pom.xml'
              options: '--settings $(mavenSettings) -DVSTS_FEED_TOKEN=$(VSTS_FEED_TOKEN) -P $(osProjectName)-core install'
              publishJUnitResults: false
              javaHomeOption: 'JDKVersion'
              mavenVersionOption: 'Default'
              mavenAuthenticateFeed: false
              effectivePomSkip: false
              sonarQubeRunAnalysis: false

          - task: Maven@3
            displayName: 'Package unit-gke'
            inputs:
              mavenPomFile: 'provider/unit-gcp/unit-gke/pom.xml'
              options: '--settings $(mavenSettings) -DVSTS_FEED_TOKEN=$(VSTS_FEED_TOKEN) -P $(osProjectName)-gke -DskipTests package'
              publishJUnitResults: false
              javaHomeOption: 'JDKVersion'
              mavenVersionOption: 'Default'
              mavenAuthenticateFeed: false
              effectivePomSkip: false

          - bash: |
              #!/bin/bash
              set -e
              pushd $(unitCatalogsDir)
              docker build -t $(sourceUnitCatalogsImageName):$(tag) .
              echo 'Image done.'
              cat $(gcrKey.secureFilePath) | docker login -u _json_key --password-stdin https://gcr.io
              echo 'Login done.'

              docker tag $(sourceUnitCatalogsImageName):$(tag) $(sourceUnitCatalogsImageName):latest
              echo 'Added $(sourceUnitCatalogsImageName):latest tag to $(sourceUnitCatalogsImageName):$(tag)'
              docker push $(sourceUnitCatalogsImageName):$(tag)
              echo 'Pushed $(sourceUnitCatalogsImageName):$(tag)'
              docker push $(sourceUnitCatalogsImageName):latest
              echo 'Pushed $(sourceUnitCatalogsImageName):latest'
              echo 'Push done.'
              popd
            displayName: "Create image for init container"
             
          - bash: |
              #!/bin/bash
              set -e
              curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
              chmod 700 get_helm.sh
              ./get_helm.sh
              # package helm chart
              helm package provider/unit-gcp/unit-gke/unit-gke --version 0.0.1 --destination '$(build.artifactstagingdirectory)'
            displayName: 'install helm 3 and package helm chart'
          - bash: |
              #!/bin/bash
              set -e
              pushd $(dockerDir)
              docker-compose build $(imageName)
              echo 'Image done.'
              cat $(gcrKey.secureFilePath) | docker login -u _json_key --password-stdin https://gcr.io
              echo 'Login done.'

              docker tag $(sourceImageName) $(sourceImageName):$(tag)
              docker tag $(sourceImageName) $(sourceImageName):latest
              docker push $(sourceImageName):$(tag)
              docker push $(sourceImageName):latest
              echo 'Push done.'

              helm upgrade --kubeconfig $(kuberConfig.secureFilePath) --install --wait --set-string tag=$(tag),repository=$(devIntRepository) --cleanup-on-fail '$(deploymentName)' '$(build.artifactstagingdirectory)/$(deploymentName)-0.0.1.tgz'

              kubectl --kubeconfig $(kuberConfig.secureFilePath) rollout restart deployment/$(deploymentName)
              popd

              attempt_counter=0
              max_attempts=60
              until $(curl --head $(UNIT_DEVINT_READINESS_URL) --silent -o /dev/null --fail); do
              if [ ${attempt_counter} -eq ${max_attempts} ];then
              echo "Service is not available, integraton tests are skipped"
              exit 1
              fi

              printf '.'
              attempt_counter=$(($attempt_counter+1))
              sleep 2
              done
            displayName: "Build Docker image and deploy"
          - bash: |
              #!/bin/bash
              set -e
              pushd $(integrationTestsDir)
              chmod +x run-integration-tests.sh
              ./run-integration-tests.sh $(INTEGRATION_TESTER)
              popd
            displayName: "Run integration tests"


#  - stage: DeployToQA
#    condition: and(succeeded(), eq(variables['Build.Reason'], 'Manual'))
#    variables:
#    - group: 'GKE_QA_INTEGRATION_TESTS'
#    - group: 'GKE_UNIT_INTEGRATION_TESTS'
#    - group: 'GKE_CICD_FEED_TOKEN'
#    - name: qaRepository
#      value: us.gcr.io/opendes-evt/
#    - name: destinationUnitCatalogsImageName
#      value: $(qaRepository)$(unitCatalogsImageName)
#    - name:  destinationImageName
#      value: $(qaRepository)$(imageName)

#    jobs:
#      - job: DeployToQA

#        steps:
#
#         - task: DownloadSecureFile@1
#            name: gcrKey
#            inputs:
#              secureFile: cicd-push-image-to-cr-keyfile.json
#
#          - task: DownloadSecureFile@1
#            name: gcrKeyEvt
#            inputs:
#              secureFile: cicd-push-image-to-cr-evt-keyfile.json
#
#          - task: DownloadSecureFile@1
#            name: kuberConfigEvt
#            inputs:
#              secureFile: kubeconfig-evt-opendes-qa-us
#          - bash: |
#              #!/bin/bash
#              set -e
#              curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
#              chmod 700 get_helm.sh
#              ./get_helm.sh
#              # package helm chart
#              helm package provider/unit-gcp/unit-gke/unit-gke --version 0.0.1 --destination '$(build.artifactstagingdirectory)'
#            displayName: 'install helm 3 and package helm chart'
#          - bash: |
              #!/bin/bash
#              set -e
#
#              cat $(gcrKey.secureFilePath) | docker login -u _json_key --password-stdin https://gcr.io
#              docker pull $(sourceImageName):$(tag)
#              docker pull $(sourceUnitCatalogsImageName):$(tag)
#              echo 'Pull done'
#              cat $(gcrKeyEvt.secureFilePath) | docker login -u _json_key --password-stdin https://us.gcr.io
#              docker tag $(sourceUnitCatalogsImageName):$(tag) $(destinationUnitCatalogsImageName):$(tag)
#              docker tag $(sourceUnitCatalogsImageName):$(tag) $(destinationUnitCatalogsImageName):latest
#              docker push $(destinationUnitCatalogsImageName):$(tag)
#              docker push $(destinationUnitCatalogsImageName):latest
#              echo 'Unit catalogs push done'
#              docker tag $(sourceImageName):$(tag) $(destinationImageName):$(tag)
#              docker tag $(sourceImageName):$(tag) $(destinationImageName):latest
#              docker push $(destinationImageName):$(tag)
#              docker push $(destinationImageName):latest

#              helm upgrade --kubeconfig $(kuberConfigEvt.secureFilePath) --install --wait --set-string tag=$(tag),repository=$(qaRepository) --cleanup-on-fail '$(deploymentName)' '$(build.artifactstagingdirectory)/$(deploymentName)-0.0.1.tgz'
#              kubectl --kubeconfig $(kuberConfigEvt.secureFilePath) rollout restart deployment/$(deploymentName)

#              echo 'run curl -k --head $(UNIT_QA_READINESS_URL)'
#              attempt_counter=0
#              max_attempts=60
#              until $(curl -k --head $(UNIT_QA_READINESS_URL) --silent -o /dev/null --fail); do
#              if [ ${attempt_counter} -eq ${max_attempts} ];then
#              echo "Service is not available, integraton tests are skipped"
#              exit 1
#              fi
#              printf '.'
#              attempt_counter=$(($attempt_counter+1))
#              sleep 2
#              done
#            displayName: "Pull and Push Docker images. Redeploy app"
#          - bash: |
              #!/bin/bash
#              set -e

#              pushd $(integrationTestsDir)
#              chmod +x run-integration-tests.sh
#              ./run-integration-tests.sh $(INTEGRATION_TESTER)
#              popd
#            displayName: "Run integration tests"
