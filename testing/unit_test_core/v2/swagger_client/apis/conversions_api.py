# coding: utf-8

"""
    Unit Service API

    Unit and Measurement Service

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class ConversionsApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def get_conversion_as_abcd(self, **kwargs):
        """
        Get Abcd Unit conversion parameters given two Units
        Get the Energistics style unit parameters given the 'fromUnit' and 'toUnit'. The 'fromUnit' and 'toUnit' definitions can either be passed as persistable reference strings (JSON serialized Unit essence) or as Unit essence structures.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_conversion_as_abcd(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ConversionAbcdRequest body:
        :param str data_partition_id:
        :return: ConversionResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_conversion_as_abcd_with_http_info(**kwargs)
        else:
            (data) = self.get_conversion_as_abcd_with_http_info(**kwargs)
            return data

    def get_conversion_as_abcd_with_http_info(self, **kwargs):
        """
        Get Abcd Unit conversion parameters given two Units
        Get the Energistics style unit parameters given the 'fromUnit' and 'toUnit'. The 'fromUnit' and 'toUnit' definitions can either be passed as persistable reference strings (JSON serialized Unit essence) or as Unit essence structures.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_conversion_as_abcd_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ConversionAbcdRequest body:
        :param str data_partition_id:
        :return: ConversionResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'data_partition_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_conversion_as_abcd" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'data_partition_id' in params:
            header_params['data-partition-id'] = params['data_partition_id']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer', 'google_id_token']

        return self.api_client.call_api('/conversion/abcd', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ConversionResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_conversion_as_abcd_by_namespace_and_symbols(self, namespaces, from_symbol, to_symbol, **kwargs):
        """
        Get Abcd Unit conversion parameters given two Unit specifications
        Get the Energistics style unit parameters given the 'from' and 'to' unit symbols and the namespace(-list) to disambiguate the unit symbols. Example for a prioritized namespaces list: 'LIS,RP66,ECL,Energistics_UoM' - this will prioritize the units in the LIS namespace over other namespaces.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_conversion_as_abcd_by_namespace_and_symbols(namespaces, from_symbol, to_symbol, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str namespaces: List of namespace codes to disambiguate the unit symbols. Example: 'LIS,RP66,ECL,Energistics_UoM' to prioritize old LIS unit symbols. (required)
        :param str from_symbol: The source (=from) unit symbol, example: 'ftUS'. (required)
        :param str to_symbol: The target (=to) unit symbol, example: 'm'. (required)
        :param str data_partition_id:
        :return: ConversionResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_conversion_as_abcd_by_namespace_and_symbols_with_http_info(namespaces, from_symbol, to_symbol, **kwargs)
        else:
            (data) = self.get_conversion_as_abcd_by_namespace_and_symbols_with_http_info(namespaces, from_symbol, to_symbol, **kwargs)
            return data

    def get_conversion_as_abcd_by_namespace_and_symbols_with_http_info(self, namespaces, from_symbol, to_symbol, **kwargs):
        """
        Get Abcd Unit conversion parameters given two Unit specifications
        Get the Energistics style unit parameters given the 'from' and 'to' unit symbols and the namespace(-list) to disambiguate the unit symbols. Example for a prioritized namespaces list: 'LIS,RP66,ECL,Energistics_UoM' - this will prioritize the units in the LIS namespace over other namespaces.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_conversion_as_abcd_by_namespace_and_symbols_with_http_info(namespaces, from_symbol, to_symbol, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str namespaces: List of namespace codes to disambiguate the unit symbols. Example: 'LIS,RP66,ECL,Energistics_UoM' to prioritize old LIS unit symbols. (required)
        :param str from_symbol: The source (=from) unit symbol, example: 'ftUS'. (required)
        :param str to_symbol: The target (=to) unit symbol, example: 'm'. (required)
        :param str data_partition_id:
        :return: ConversionResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['namespaces', 'from_symbol', 'to_symbol', 'data_partition_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_conversion_as_abcd_by_namespace_and_symbols" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'namespaces' is set
        if ('namespaces' not in params) or (params['namespaces'] is None):
            raise ValueError("Missing the required parameter `namespaces` when calling `get_conversion_as_abcd_by_namespace_and_symbols`")
        # verify the required parameter 'from_symbol' is set
        if ('from_symbol' not in params) or (params['from_symbol'] is None):
            raise ValueError("Missing the required parameter `from_symbol` when calling `get_conversion_as_abcd_by_namespace_and_symbols`")
        # verify the required parameter 'to_symbol' is set
        if ('to_symbol' not in params) or (params['to_symbol'] is None):
            raise ValueError("Missing the required parameter `to_symbol` when calling `get_conversion_as_abcd_by_namespace_and_symbols`")


        collection_formats = {}

        path_params = {}
        if 'namespaces' in params:
            path_params['namespaces'] = params['namespaces']
        if 'from_symbol' in params:
            path_params['fromSymbol'] = params['from_symbol']
        if 'to_symbol' in params:
            path_params['toSymbol'] = params['to_symbol']

        query_params = []

        header_params = {}
        if 'data_partition_id' in params:
            header_params['data-partition-id'] = params['data_partition_id']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer', 'google_id_token']

        return self.api_client.call_api('/conversion/abcd/{namespaces}/{fromSymbol}/{toSymbol}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ConversionResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_conversion_as_scale_offset(self, **kwargs):
        """
        Get ScaleOffset Unit conversion parameters given two Units
        Get the scale/offset unit parameters given the 'fromUnit' and 'toUnit'. The 'fromUnit' and 'toUnit' definitions can either be passed as persistable reference strings (JSON serialized Unit essence) or as Unit essence structures.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_conversion_as_scale_offset(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ConversionScaleOffsetRequest body:
        :param str data_partition_id:
        :return: ConversionResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_conversion_as_scale_offset_with_http_info(**kwargs)
        else:
            (data) = self.get_conversion_as_scale_offset_with_http_info(**kwargs)
            return data

    def get_conversion_as_scale_offset_with_http_info(self, **kwargs):
        """
        Get ScaleOffset Unit conversion parameters given two Units
        Get the scale/offset unit parameters given the 'fromUnit' and 'toUnit'. The 'fromUnit' and 'toUnit' definitions can either be passed as persistable reference strings (JSON serialized Unit essence) or as Unit essence structures.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_conversion_as_scale_offset_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ConversionScaleOffsetRequest body:
        :param str data_partition_id:
        :return: ConversionResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'data_partition_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_conversion_as_scale_offset" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'data_partition_id' in params:
            header_params['data-partition-id'] = params['data_partition_id']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer', 'google_id_token']

        return self.api_client.call_api('/conversion/scale', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ConversionResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_conversion_as_scale_offset_by_namespace_and_symbols(self, namespaces, from_symbol, to_symbol, **kwargs):
        """
        Get ScaleOffset Unit conversion parameters given two unit specifications
        Get the scale/offset unit parameters given the 'from' and 'to' unit symbols and the namespace(-list) to disambiguate the unit symbols. Example for a prioritized namespaces list: 'LIS,RP66,ECL,Energistics_UoM' - this will prioritize the units in the LIS namespace over other namespaces.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_conversion_as_scale_offset_by_namespace_and_symbols(namespaces, from_symbol, to_symbol, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str namespaces: List of namespace codes to disambiguate the unit symbols. Example: 'LIS,RP66,ECL,Energistics_UoM' to prioritize old LIS unit symbols. (required)
        :param str from_symbol: The source (=from) unit symbol, example: 'ftUS'. (required)
        :param str to_symbol: The target (=to) unit symbol, example: 'm'. (required)
        :return: ConversionResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_conversion_as_scale_offset_by_namespace_and_symbols_with_http_info(namespaces, from_symbol, to_symbol, **kwargs)
        else:
            (data) = self.get_conversion_as_scale_offset_by_namespace_and_symbols_with_http_info(namespaces, from_symbol, to_symbol, **kwargs)
            return data

    def get_conversion_as_scale_offset_by_namespace_and_symbols_with_http_info(self, namespaces, from_symbol, to_symbol, **kwargs):
        """
        Get ScaleOffset Unit conversion parameters given two unit specifications
        Get the scale/offset unit parameters given the 'from' and 'to' unit symbols and the namespace(-list) to disambiguate the unit symbols. Example for a prioritized namespaces list: 'LIS,RP66,ECL,Energistics_UoM' - this will prioritize the units in the LIS namespace over other namespaces.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_conversion_as_scale_offset_by_namespace_and_symbols_with_http_info(namespaces, from_symbol, to_symbol, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str namespaces: List of namespace codes to disambiguate the unit symbols. Example: 'LIS,RP66,ECL,Energistics_UoM' to prioritize old LIS unit symbols. (required)
        :param str from_symbol: The source (=from) unit symbol, example: 'ftUS'. (required)
        :param str to_symbol: The target (=to) unit symbol, example: 'm'. (required)
        :return: ConversionResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['namespaces', 'from_symbol', 'to_symbol']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_conversion_as_scale_offset_by_namespace_and_symbols" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'namespaces' is set
        if ('namespaces' not in params) or (params['namespaces'] is None):
            raise ValueError("Missing the required parameter `namespaces` when calling `get_conversion_as_scale_offset_by_namespace_and_symbols`")
        # verify the required parameter 'from_symbol' is set
        if ('from_symbol' not in params) or (params['from_symbol'] is None):
            raise ValueError("Missing the required parameter `from_symbol` when calling `get_conversion_as_scale_offset_by_namespace_and_symbols`")
        # verify the required parameter 'to_symbol' is set
        if ('to_symbol' not in params) or (params['to_symbol'] is None):
            raise ValueError("Missing the required parameter `to_symbol` when calling `get_conversion_as_scale_offset_by_namespace_and_symbols`")


        collection_formats = {}

        path_params = {}
        if 'namespaces' in params:
            path_params['namespaces'] = params['namespaces']
        if 'from_symbol' in params:
            path_params['fromSymbol'] = params['from_symbol']
        if 'to_symbol' in params:
            path_params['toSymbol'] = params['to_symbol']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer', 'google_id_token']

        return self.api_client.call_api('/conversion/scale/{namespaces}/{fromSymbol}/{toSymbol}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ConversionResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
