# coding: utf-8

"""
    Unit Service API

    Unit and Measurement Service

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class UnitSystemsApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def get_unit_by_unit_system_and_measurement(self, unit_system_name, **kwargs):
        """
        Get a unique Unit for the given Measurement in the named UnitSystem
        Get a unique unit given a unit system name and a measurement persistable reference string or measurement essence Json structure. Example: Unit system: English; measurement essence: { \"ancestry\": \"Length\", \"type\": \"UM\" }
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_unit_by_unit_system_and_measurement(unit_system_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str unit_system_name: The name of the unit system. Example: 'English'. (required)
        :param MeasurementRequest body: The request to get a specific measurement given a persistable reference string or measurement essence structure.
        :param str data_partition_id:
        :return: Unit
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_unit_by_unit_system_and_measurement_with_http_info(unit_system_name, **kwargs)
        else:
            (data) = self.get_unit_by_unit_system_and_measurement_with_http_info(unit_system_name, **kwargs)
            return data

    def get_unit_by_unit_system_and_measurement_with_http_info(self, unit_system_name, **kwargs):
        """
        Get a unique Unit for the given Measurement in the named UnitSystem
        Get a unique unit given a unit system name and a measurement persistable reference string or measurement essence Json structure. Example: Unit system: English; measurement essence: { \"ancestry\": \"Length\", \"type\": \"UM\" }
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_unit_by_unit_system_and_measurement_with_http_info(unit_system_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str unit_system_name: The name of the unit system. Example: 'English'. (required)
        :param MeasurementRequest body: The request to get a specific measurement given a persistable reference string or measurement essence structure.
        :param str data_partition_id:
        :return: Unit
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['unit_system_name', 'body', 'data_partition_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_unit_by_unit_system_and_measurement" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'unit_system_name' is set
        if ('unit_system_name' not in params) or (params['unit_system_name'] is None):
            raise ValueError("Missing the required parameter `unit_system_name` when calling `get_unit_by_unit_system_and_measurement`")


        collection_formats = {}

        path_params = {}
        if 'unit_system_name' in params:
            path_params['unitSystemName'] = params['unit_system_name']

        query_params = []

        header_params = {}
        if 'data_partition_id' in params:
            header_params['data-partition-id'] = params['data_partition_id']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer', 'google_id_token']

        return self.api_client.call_api('/unit/unitsystem/{unitSystemName}', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Unit',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_unit_by_unit_system_and_measurement_ancestry(self, unit_system_name, ancestry, **kwargs):
        """
        Get a unique Unit for the given Measurement ancestry in the named UnitSystem
        Get a unique unit given a unit system name and dot separated measurement ancestry, e.g. Time_Per_Length.Acoustic_Slowness.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_unit_by_unit_system_and_measurement_ancestry(unit_system_name, ancestry, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str unit_system_name: The name of the unit system. Example: 'English'. (required)
        :param str ancestry: The measurement's ancestry, example: 'Time_Per_Length.Acoustic_Slowness'. (required)
        :param str data_partition_id:
        :return: Unit
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_unit_by_unit_system_and_measurement_ancestry_with_http_info(unit_system_name, ancestry, **kwargs)
        else:
            (data) = self.get_unit_by_unit_system_and_measurement_ancestry_with_http_info(unit_system_name, ancestry, **kwargs)
            return data

    def get_unit_by_unit_system_and_measurement_ancestry_with_http_info(self, unit_system_name, ancestry, **kwargs):
        """
        Get a unique Unit for the given Measurement ancestry in the named UnitSystem
        Get a unique unit given a unit system name and dot separated measurement ancestry, e.g. Time_Per_Length.Acoustic_Slowness.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_unit_by_unit_system_and_measurement_ancestry_with_http_info(unit_system_name, ancestry, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str unit_system_name: The name of the unit system. Example: 'English'. (required)
        :param str ancestry: The measurement's ancestry, example: 'Time_Per_Length.Acoustic_Slowness'. (required)
        :param str data_partition_id:
        :return: Unit
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['unit_system_name', 'ancestry', 'data_partition_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_unit_by_unit_system_and_measurement_ancestry" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'unit_system_name' is set
        if ('unit_system_name' not in params) or (params['unit_system_name'] is None):
            raise ValueError("Missing the required parameter `unit_system_name` when calling `get_unit_by_unit_system_and_measurement_ancestry`")
        # verify the required parameter 'ancestry' is set
        if ('ancestry' not in params) or (params['ancestry'] is None):
            raise ValueError("Missing the required parameter `ancestry` when calling `get_unit_by_unit_system_and_measurement_ancestry`")


        collection_formats = {}

        path_params = {}
        if 'unit_system_name' in params:
            path_params['unitSystemName'] = params['unit_system_name']
        if 'ancestry' in params:
            path_params['ancestry'] = params['ancestry']

        query_params = []

        header_params = {}
        if 'data_partition_id' in params:
            header_params['data-partition-id'] = params['data_partition_id']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer', 'google_id_token']

        return self.api_client.call_api('/unit/unitsystem/{unitSystemName}/{ancestry}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Unit',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_unit_system_by_essence(self, **kwargs):
        """
        Get all Units assigned to the UnitSystem
        Get all unit assignments for the given unit system essence.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_unit_system_by_essence(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param UnitSystemRequest body: The essence of the unit system. Example: {\"ancestry\":\"English\"}
        :param int offset: The offset into the result array. Default 0.
        :param int limit: The size limit for the number of items in the response. Default 100; -1 for all items.
        :param str data_partition_id:
        :return: UnitSystem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_unit_system_by_essence_with_http_info(**kwargs)
        else:
            (data) = self.get_unit_system_by_essence_with_http_info(**kwargs)
            return data

    def get_unit_system_by_essence_with_http_info(self, **kwargs):
        """
        Get all Units assigned to the UnitSystem
        Get all unit assignments for the given unit system essence.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_unit_system_by_essence_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param UnitSystemRequest body: The essence of the unit system. Example: {\"ancestry\":\"English\"}
        :param int offset: The offset into the result array. Default 0.
        :param int limit: The size limit for the number of items in the response. Default 100; -1 for all items.
        :param str data_partition_id:
        :return: UnitSystem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'offset', 'limit', 'data_partition_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_unit_system_by_essence" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))
        if 'limit' in params:
            query_params.append(('limit', params['limit']))

        header_params = {}
        if 'data_partition_id' in params:
            header_params['data-partition-id'] = params['data_partition_id']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer', 'google_id_token']

        return self.api_client.call_api('/unitsystem', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='UnitSystem',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_unit_system_by_name(self, name, **kwargs):
        """
        Get all Units assigned to the UnitSystem name
        Get all unit assignments for the given unit system.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_unit_system_by_name(name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: The name of the unit system. Example: 'English'. (required)
        :param int offset: The offset into the result array. Default 0.
        :param int limit: The size limit for the number of items in the response. Default 100; -1 for all items.
        :return: UnitSystem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_unit_system_by_name_with_http_info(name, **kwargs)
        else:
            (data) = self.get_unit_system_by_name_with_http_info(name, **kwargs)
            return data

    def get_unit_system_by_name_with_http_info(self, name, **kwargs):
        """
        Get all Units assigned to the UnitSystem name
        Get all unit assignments for the given unit system.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_unit_system_by_name_with_http_info(name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: The name of the unit system. Example: 'English'. (required)
        :param int offset: The offset into the result array. Default 0.
        :param int limit: The size limit for the number of items in the response. Default 100; -1 for all items.
        :return: UnitSystem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'offset', 'limit']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_unit_system_by_name" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_unit_system_by_name`")


        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))
        if 'limit' in params:
            query_params.append(('limit', params['limit']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer', 'google_id_token']

        return self.api_client.call_api('/unitsystem/{name}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='UnitSystem',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_unit_system_list(self, **kwargs):
        """
        Get all UnitSystem info
        Get all known unit systems as info (name, description, ancestry, persistableReference) as declared in this catalog.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_unit_system_list(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int offset: The offset into the result array. Default 0.
        :param int limit: The size limit of the response. Default 100; -1 for all items.
        :param str data_partition_id:
        :return: UnitSystemInfoList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_unit_system_list_with_http_info(**kwargs)
        else:
            (data) = self.get_unit_system_list_with_http_info(**kwargs)
            return data

    def get_unit_system_list_with_http_info(self, **kwargs):
        """
        Get all UnitSystem info
        Get all known unit systems as info (name, description, ancestry, persistableReference) as declared in this catalog.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_unit_system_list_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int offset: The offset into the result array. Default 0.
        :param int limit: The size limit of the response. Default 100; -1 for all items.
        :param str data_partition_id:
        :return: UnitSystemInfoList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['offset', 'limit', 'data_partition_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_unit_system_list" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))
        if 'limit' in params:
            query_params.append(('limit', params['limit']))

        header_params = {}
        if 'data_partition_id' in params:
            header_params['data-partition-id'] = params['data_partition_id']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer', 'google_id_token']

        return self.api_client.call_api('/unitsystem/list', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='UnitSystemInfoList',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
