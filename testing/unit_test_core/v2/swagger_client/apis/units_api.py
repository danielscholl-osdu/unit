# coding: utf-8

"""
    Unit Service API

    Unit and Measurement Service

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class UnitsApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def get_preferred_units_by_measurement(self, **kwargs):
        """
        Get preferred Units for a Measurement
        Get the preferred units given a measurement persistable reference string or measurement essence JSON structure.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_preferred_units_by_measurement(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param MeasurementRequest body: The request to get a specific measurement given a persistable reference string or measurement essence structure.
        :param str data_partition_id:

        :return: QueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_preferred_units_by_measurement_with_http_info(**kwargs)
        else:
            (data) = self.get_preferred_units_by_measurement_with_http_info(**kwargs)
            return data

    def get_preferred_units_by_measurement_with_http_info(self, **kwargs):
        """
        Get preferred Units for a Measurement
        Get the preferred units given a measurement persistable reference string or measurement essence JSON structure.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_preferred_units_by_measurement_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param MeasurementRequest body: The request to get a specific measurement given a persistable reference string or measurement essence structure.
        :param str data_partition_id:

        :return: QueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'data_partition_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_preferred_units_by_measurement" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'data_partition_id' in params:
            header_params['data-partition-id'] = params['data_partition_id']


        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer', 'google_id_token']

        return self.api_client.call_api('/unit/measurement/preferred', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='QueryResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_preferred_units_by_measurement_ancestry(self, ancestry, **kwargs):
        """
        Get preferred Units for a Measurement by ancestry
        Get the preferred units given dot separated ancestry, e.g. Time_Per_Length.Acoustic_Slowness.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_preferred_units_by_measurement_ancestry(ancestry, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str ancestry: The measurement's ancestry, example: 'Time_Per_Length.Acoustic_Slowness' (required)
        :param str data_partition_id:

        :return: QueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_preferred_units_by_measurement_ancestry_with_http_info(ancestry, **kwargs)
        else:
            (data) = self.get_preferred_units_by_measurement_ancestry_with_http_info(ancestry, **kwargs)
            return data

    def get_preferred_units_by_measurement_ancestry_with_http_info(self, ancestry, **kwargs):
        """
        Get preferred Units for a Measurement by ancestry
        Get the preferred units given dot separated ancestry, e.g. Time_Per_Length.Acoustic_Slowness.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_preferred_units_by_measurement_ancestry_with_http_info(ancestry, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str ancestry: The measurement's ancestry, example: 'Time_Per_Length.Acoustic_Slowness' (required)
        :param str data_partition_id:

        :return: QueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ancestry', 'data_partition_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_preferred_units_by_measurement_ancestry" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ancestry' is set
        if ('ancestry' not in params) or (params['ancestry'] is None):
            raise ValueError("Missing the required parameter `ancestry` when calling `get_preferred_units_by_measurement_ancestry`")


        collection_formats = {}

        path_params = {}
        if 'ancestry' in params:
            path_params['ancestry'] = params['ancestry']

        query_params = []

        header_params = {}
        if 'data_partition_id' in params:
            header_params['data-partition-id'] = params['data_partition_id']


        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer', 'google_id_token']

        return self.api_client.call_api('/unit/measurement/preferred/{ancestry}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='QueryResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_unit(self, **kwargs):
        """
        Get a specific Unit
        Get a specific unit instance given either a persistable reference string or unit essence JSON structure.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_unit(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param UnitRequest body: The unit's essence either as persistable reference string or unit essence JSON structure
        :param str data_partition_id:
        :return: Unit
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_unit_with_http_info(**kwargs)
        else:
            (data) = self.get_unit_with_http_info(**kwargs)
            return data

    def get_unit_with_http_info(self, **kwargs):
        """
        Get a specific Unit
        Get a specific unit instance given either a persistable reference string or unit essence JSON structure.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_unit_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param UnitRequest body: The unit's essence either as persistable reference string or unit essence JSON structure
        :param str data_partition_id:
        :return: Unit
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'data_partition_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_unit" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'data_partition_id' in params:
            header_params['data-partition-id'] = params['data_partition_id']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer', 'google_id_token']

        return self.api_client.call_api('/unit', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Unit',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_unit_by_namespace_and_symbol(self, namespaces, symbol, **kwargs):
        """
        Get a unique Unit by Namespace,Symbol
        Get single, unique unit given a namespace or namespace list and a symbol. Example: namespace='LIS,RP66,ECL', symbol='F' returns the LIS Foot.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_unit_by_namespace_and_symbol(namespaces, symbol, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str namespaces: The namespace or namespace list setting the priority of sources to resolve a symbol ambiguity. Example: 'Energistics_UoM' or 'LIS,RP66,ECL'.  (required)
        :param str symbol: The unit symbol to look up. Example: 'F'. 'F' is ambiguous and requires a namespace to disambiguate. (required)
        :param str data_partition_id:
        :return: Unit
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_unit_by_namespace_and_symbol_with_http_info(namespaces, symbol, **kwargs)
        else:
            (data) = self.get_unit_by_namespace_and_symbol_with_http_info(namespaces, symbol, **kwargs)
            return data

    def get_unit_by_namespace_and_symbol_with_http_info(self, namespaces, symbol, **kwargs):
        """
        Get a unique Unit by Namespace,Symbol
        Get single, unique unit given a namespace or namespace list and a symbol. Example: namespace='LIS,RP66,ECL', symbol='F' returns the LIS Foot.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_unit_by_namespace_and_symbol_with_http_info(namespaces, symbol, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str namespaces: The namespace or namespace list setting the priority of sources to resolve a symbol ambiguity. Example: 'Energistics_UoM' or 'LIS,RP66,ECL'.  (required)
        :param str symbol: The unit symbol to look up. Example: 'F'. 'F' is ambiguous and requires a namespace to disambiguate. (required)
        :param str data_partition_id:
        :return: Unit
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['namespaces', 'symbol', 'data_partition_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_unit_by_namespace_and_symbol" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'namespaces' is set
        if ('namespaces' not in params) or (params['namespaces'] is None):
            raise ValueError("Missing the required parameter `namespaces` when calling `get_unit_by_namespace_and_symbol`")
        # verify the required parameter 'symbol' is set
        if ('symbol' not in params) or (params['symbol'] is None):
            raise ValueError("Missing the required parameter `symbol` when calling `get_unit_by_namespace_and_symbol`")


        collection_formats = {}

        path_params = {}
        if 'namespaces' in params:
            path_params['namespaces'] = params['namespaces']
        if 'symbol' in params:
            path_params['symbol'] = params['symbol']

        query_params = []

        header_params = {}
        if 'data_partition_id' in params:
            header_params['data-partition-id'] = params['data_partition_id']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer', 'google_id_token']

        return self.api_client.call_api('/unit/symbol/{namespaces}/{symbol}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Unit',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_unit_map_items(self, **kwargs):
        """
        Get Unit maps between namespaces
        Get the UnitMapItems defined between namespaces in this catalog.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_unit_map_items(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int offset: The offset into the result array. Default 0.
        :param int limit: The size limit for the number of items in the response. Default 100; -1 for all items.
        :return: QueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_unit_map_items_with_http_info(**kwargs)
        else:
            (data) = self.get_unit_map_items_with_http_info(**kwargs)
            return data

    def get_unit_map_items_with_http_info(self, **kwargs):
        """
        Get Unit maps between namespaces
        Get the UnitMapItems defined between namespaces in this catalog.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_unit_map_items_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int offset: The offset into the result array. Default 0.
        :param int limit: The size limit for the number of items in the response. Default 100; -1 for all items.
        :return: QueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['offset', 'limit']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_unit_map_items" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))
        if 'limit' in params:
            query_params.append(('limit', params['limit']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer', 'google_id_token']

        return self.api_client.call_api('/unit/maps', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='QueryResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_units(self, **kwargs):
        """
        Get all Units
        Get all units defined in this catalog.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_units(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int offset: The offset into the result array. Default 0.
        :param int limit: The size limit for the number of items in the response. Default 100; -1 for all items.
        :param str data_partition_id:
        :return: QueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_units_with_http_info(**kwargs)
        else:
            (data) = self.get_units_with_http_info(**kwargs)
            return data

    def get_units_with_http_info(self, **kwargs):
        """
        Get all Units
        Get all units defined in this catalog.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_units_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int offset: The offset into the result array. Default 0.
        :param int limit: The size limit for the number of items in the response. Default 100; -1 for all items.
        :param str data_partition_id:
        :return: QueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['offset', 'limit', 'data_partition_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_units" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))
        if 'limit' in params:
            query_params.append(('limit', params['limit']))

        header_params = {}
        if 'data_partition_id' in params:
            header_params['data-partition-id'] = params['data_partition_id']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer', 'google_id_token']

        return self.api_client.call_api('/unit', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='QueryResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_units_by_measurement_ancestry(self, ancestry, **kwargs):
        """
        Get all Units for a Measurement by ancestry
        Get all units given dot separated ancestry, e.g. Time_Per_Length.Acoustic_Slowness.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_units_by_measurement_ancestry(ancestry, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str ancestry: The measurement's ancestry, example: 'Time_Per_Length.Acoustic_Slowness' (required)
        :param str data_partition_id:
        :return: QueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_units_by_measurement_ancestry_with_http_info(ancestry, **kwargs)
        else:
            (data) = self.get_units_by_measurement_ancestry_with_http_info(ancestry, **kwargs)
            return data

    def get_units_by_measurement_ancestry_with_http_info(self, ancestry, **kwargs):
        """
        Get all Units for a Measurement by ancestry
        Get all units given dot separated ancestry, e.g. Time_Per_Length.Acoustic_Slowness.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_units_by_measurement_ancestry_with_http_info(ancestry, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str ancestry: The measurement's ancestry, example: 'Time_Per_Length.Acoustic_Slowness' (required)
        :param str data_partition_id:
        :return: QueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ancestry', 'data_partition_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_units_by_measurement_ancestry" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ancestry' is set
        if ('ancestry' not in params) or (params['ancestry'] is None):
            raise ValueError("Missing the required parameter `ancestry` when calling `get_units_by_measurement_ancestry`")


        collection_formats = {}

        path_params = {}
        if 'ancestry' in params:
            path_params['ancestry'] = params['ancestry']

        query_params = []

        header_params = {}
        if 'data_partition_id' in params:
            header_params['data-partition-id'] = params['data_partition_id']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer', 'google_id_token']

        return self.api_client.call_api('/unit/measurement/{ancestry}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='QueryResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_units_by_symbol(self, symbol, **kwargs):
        """
        Get Units by symbol
        Get all units given a specific symbol. Example: 'F': 'F' is defined in multiple namespaces belonging to different measurements.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_units_by_symbol(symbol, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str symbol: The unit symbol to look up. Example: 'F'. 'F' is defined in multiple namespaces. (required)
        :param str data_partition_id:
        :return: QueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_units_by_symbol_with_http_info(symbol, **kwargs)
        else:
            (data) = self.get_units_by_symbol_with_http_info(symbol, **kwargs)
            return data

    def get_units_by_symbol_with_http_info(self, symbol, **kwargs):
        """
        Get Units by symbol
        Get all units given a specific symbol. Example: 'F': 'F' is defined in multiple namespaces belonging to different measurements.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_units_by_symbol_with_http_info(symbol, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str symbol: The unit symbol to look up. Example: 'F'. 'F' is defined in multiple namespaces. (required)
        :param str data_partition_id:
        :return: QueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['symbol', 'data_partition_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_units_by_symbol" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'symbol' is set
        if ('symbol' not in params) or (params['symbol'] is None):
            raise ValueError("Missing the required parameter `symbol` when calling `get_units_by_symbol`")


        collection_formats = {}

        path_params = {}
        if 'symbol' in params:
            path_params['symbol'] = params['symbol']

        query_params = []

        header_params = {}
        if 'data_partition_id' in params:
            header_params['data-partition-id'] = params['data_partition_id']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer', 'google_id_token']

        return self.api_client.call_api('/unit/symbol/{symbol}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='QueryResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_units_for_measurement(self, **kwargs):
        """
        Get all Units for a Measurement
        Get all units given either a measurement's persistable reference string or a measurement essence JSON structure.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_units_for_measurement(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param MeasurementRequest body: The request to get a specific measurement given a persistable reference string or measurement essence structure.
        :param str data_partition_id:
        :return: QueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_units_for_measurement_with_http_info(**kwargs)
        else:
            (data) = self.get_units_for_measurement_with_http_info(**kwargs)
            return data

    def get_units_for_measurement_with_http_info(self, **kwargs):
        """
        Get all Units for a Measurement
        Get all units given either a measurement's persistable reference string or a measurement essence JSON structure.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_units_for_measurement_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param MeasurementRequest body: The request to get a specific measurement given a persistable reference string or measurement essence structure.
        :param str data_partition_id:
        :return: QueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'data_partition_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_units_for_measurement" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'data_partition_id' in params:
            header_params['data-partition-id'] = params['data_partition_id']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer', 'google_id_token']

        return self.api_client.call_api('/unit/measurement', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='QueryResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def search_units(self, **kwargs):
        """
        Search Units by keyword(s)
        Search units by keywords. Valid keywords are: 'name', 'namespace', 'source', 'symbol', 'type' (unit parameterization type Abcd or ScaleOffset), 'state'.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.search_units(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param SearchUnitRequest body:
        :param int offset: The offset into the result array. Default 0.
        :param int limit: The size limit for the number of items in the response. Default 100; -1 for all items.
        :param str data_partition_id:
        :return: QueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.search_units_with_http_info(**kwargs)
        else:
            (data) = self.search_units_with_http_info(**kwargs)
            return data

    def search_units_with_http_info(self, **kwargs):
        """
        Search Units by keyword(s)
        Search units by keywords. Valid keywords are: 'name', 'namespace', 'source', 'symbol', 'type' (unit parameterization type Abcd or ScaleOffset), 'state'.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.search_units_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param SearchUnitRequest body:
        :param int offset: The offset into the result array. Default 0.
        :param int limit: The size limit for the number of items in the response. Default 100; -1 for all items.
        :param str data_partition_id:
        :return: QueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'offset', 'limit', 'data_partition_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_units" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))
        if 'limit' in params:
            query_params.append(('limit', params['limit']))

        header_params = {}
        if 'data_partition_id' in params:
            header_params['data-partition-id'] = params['data_partition_id']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer', 'google_id_token']

        return self.api_client.call_api('/unit/search', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='QueryResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
