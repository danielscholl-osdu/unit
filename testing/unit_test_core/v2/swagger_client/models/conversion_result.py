# coding: utf-8

"""
    Unit Service API

    Unit and Measurement Service

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ConversionResult(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'abcd': 'Abcd',
        'from_unit': 'Unit',
        'scale_offset': 'ScaleOffset',
        'to_unit': 'Unit'
    }

    attribute_map = {
        'abcd': 'abcd',
        'from_unit': 'fromUnit',
        'scale_offset': 'scaleOffset',
        'to_unit': 'toUnit'
    }

    def __init__(self, abcd=None, from_unit=None, scale_offset=None, to_unit=None):
        """
        ConversionResult - a model defined in Swagger
        """

        self._abcd = None
        self._from_unit = None
        self._scale_offset = None
        self._to_unit = None

        if abcd is not None:
          self.abcd = abcd
        if from_unit is not None:
          self.from_unit = from_unit
        if scale_offset is not None:
          self.scale_offset = scale_offset
        if to_unit is not None:
          self.to_unit = to_unit

    @property
    def abcd(self):
        """
        Gets the abcd of this ConversionResult.
        The Energistics y = (A+B*x)/(C+D*x) parameterization - if not present, scaleOffset is populated.

        :return: The abcd of this ConversionResult.
        :rtype: Abcd
        """
        return self._abcd

    @abcd.setter
    def abcd(self, abcd):
        """
        Sets the abcd of this ConversionResult.
        The Energistics y = (A+B*x)/(C+D*x) parameterization - if not present, scaleOffset is populated.

        :param abcd: The abcd of this ConversionResult.
        :type: Abcd
        """

        self._abcd = abcd

    @property
    def from_unit(self):
        """
        Gets the from_unit of this ConversionResult.
        The source or 'from' unit definition.

        :return: The from_unit of this ConversionResult.
        :rtype: Unit
        """
        return self._from_unit

    @from_unit.setter
    def from_unit(self, from_unit):
        """
        Sets the from_unit of this ConversionResult.
        The source or 'from' unit definition.

        :param from_unit: The from_unit of this ConversionResult.
        :type: Unit
        """

        self._from_unit = from_unit

    @property
    def scale_offset(self):
        """
        Gets the scale_offset of this ConversionResult.
        The y = scale*(x-offset) parameterization - if not present, Abcd is populated.

        :return: The scale_offset of this ConversionResult.
        :rtype: ScaleOffset
        """
        return self._scale_offset

    @scale_offset.setter
    def scale_offset(self, scale_offset):
        """
        Sets the scale_offset of this ConversionResult.
        The y = scale*(x-offset) parameterization - if not present, Abcd is populated.

        :param scale_offset: The scale_offset of this ConversionResult.
        :type: ScaleOffset
        """

        self._scale_offset = scale_offset

    @property
    def to_unit(self):
        """
        Gets the to_unit of this ConversionResult.
        The target or 'to' unit definition.

        :return: The to_unit of this ConversionResult.
        :rtype: Unit
        """
        return self._to_unit

    @to_unit.setter
    def to_unit(self, to_unit):
        """
        Sets the to_unit of this ConversionResult.
        The target or 'to' unit definition.

        :param to_unit: The to_unit of this ConversionResult.
        :type: Unit
        """

        self._to_unit = to_unit

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ConversionResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
