# coding: utf-8

"""
    Unit Service API

    Unit and Measurement Service

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class MeasurementDeprecationInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'remarks': 'str',
        'state': 'str',
        'superseded_by_unit_measurement': 'str'
    }

    attribute_map = {
        'remarks': 'remarks',
        'state': 'state',
        'superseded_by_unit_measurement': 'supersededByUnitMeasurement'
    }

    def __init__(self, remarks=None, state=None, superseded_by_unit_measurement=None):
        """
        MeasurementDeprecationInfo - a model defined in Swagger
        """

        self._remarks = None
        self._state = None
        self._superseded_by_unit_measurement = None

        if remarks is not None:
          self.remarks = remarks
        if state is not None:
          self.state = state
        if superseded_by_unit_measurement is not None:
          self.superseded_by_unit_measurement = superseded_by_unit_measurement

    @property
    def remarks(self):
        """
        Gets the remarks of this MeasurementDeprecationInfo.
        Optional additional remarks about this deprecation.

        :return: The remarks of this MeasurementDeprecationInfo.
        :rtype: str
        """
        return self._remarks

    @remarks.setter
    def remarks(self, remarks):
        """
        Sets the remarks of this MeasurementDeprecationInfo.
        Optional additional remarks about this deprecation.

        :param remarks: The remarks of this MeasurementDeprecationInfo.
        :type: str
        """

        self._remarks = remarks

    @property
    def state(self):
        """
        Gets the state of this MeasurementDeprecationInfo.
        The deprecation state - one of the following: 'identical', 'corrected', 'precision', 'conversion', 'conditional', 'unsupported', 'different', 'unresolved'.

        :return: The state of this MeasurementDeprecationInfo.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this MeasurementDeprecationInfo.
        The deprecation state - one of the following: 'identical', 'corrected', 'precision', 'conversion', 'conditional', 'unsupported', 'different', 'unresolved'.

        :param state: The state of this MeasurementDeprecationInfo.
        :type: str
        """

        self._state = state

    @property
    def superseded_by_unit_measurement(self):
        """
        Gets the superseded_by_unit_measurement of this MeasurementDeprecationInfo.
        If defined, the essence Json string identifying the unit superseding the deprecated unit.

        :return: The superseded_by_unit_measurement of this MeasurementDeprecationInfo.
        :rtype: str
        """
        return self._superseded_by_unit_measurement

    @superseded_by_unit_measurement.setter
    def superseded_by_unit_measurement(self, superseded_by_unit_measurement):
        """
        Sets the superseded_by_unit_measurement of this MeasurementDeprecationInfo.
        If defined, the essence Json string identifying the unit superseding the deprecated unit.

        :param superseded_by_unit_measurement: The superseded_by_unit_measurement of this MeasurementDeprecationInfo.
        :type: str
        """

        self._superseded_by_unit_measurement = superseded_by_unit_measurement

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, MeasurementDeprecationInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
