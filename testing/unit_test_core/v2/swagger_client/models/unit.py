# coding: utf-8

"""
    Unit Service API

    Unit and Measurement Service

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Unit(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'deprecation_info': 'UnitDeprecationInfo',
        'description': 'str',
        'display_symbol': 'str',
        'essence': 'UnitEssence',
        'last_modified': 'str',
        'name': 'str',
        'namespace': 'str',
        'source': 'str'
    }

    attribute_map = {
        'deprecation_info': 'deprecationInfo',
        'description': 'description',
        'display_symbol': 'displaySymbol',
        'essence': 'essence',
        'last_modified': 'lastModified',
        'name': 'name',
        'namespace': 'namespace',
        'source': 'source'
    }

    def __init__(self, deprecation_info=None, description=None, display_symbol=None, essence=None, last_modified=None, name=None, namespace=None, source=None):
        """
        Unit - a model defined in Swagger
        """

        self._deprecation_info = None
        self._description = None
        self._display_symbol = None
        self._essence = None
        self._last_modified = None
        self._name = None
        self._namespace = None
        self._source = None

        if deprecation_info is not None:
          self.deprecation_info = deprecation_info
        if description is not None:
          self.description = description
        if display_symbol is not None:
          self.display_symbol = display_symbol
        if essence is not None:
          self.essence = essence
        if last_modified is not None:
          self.last_modified = last_modified
        if name is not None:
          self.name = name
        if namespace is not None:
          self.namespace = namespace
        if source is not None:
          self.source = source

    @property
    def deprecation_info(self):
        """
        Gets the deprecation_info of this Unit.
        If present, the unit is deprecated. The deprecation information contains hints whether there is a unit superseding this unit.

        :return: The deprecation_info of this Unit.
        :rtype: UnitDeprecationInfo
        """
        return self._deprecation_info

    @deprecation_info.setter
    def deprecation_info(self, deprecation_info):
        """
        Sets the deprecation_info of this Unit.
        If present, the unit is deprecated. The deprecation information contains hints whether there is a unit superseding this unit.

        :param deprecation_info: The deprecation_info of this Unit.
        :type: UnitDeprecationInfo
        """

        self._deprecation_info = deprecation_info

    @property
    def description(self):
        """
        Gets the description of this Unit.
        Any additional remarks about this unit or blank.

        :return: The description of this Unit.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Unit.
        Any additional remarks about this unit or blank.

        :param description: The description of this Unit.
        :type: str
        """

        self._description = description

    @property
    def display_symbol(self):
        """
        Gets the display_symbol of this Unit.
        The unit symbol or unit abbreviation.

        :return: The display_symbol of this Unit.
        :rtype: str
        """
        return self._display_symbol

    @display_symbol.setter
    def display_symbol(self, display_symbol):
        """
        Sets the display_symbol of this Unit.
        The unit symbol or unit abbreviation.

        :param display_symbol: The display_symbol of this Unit.
        :type: str
        """

        self._display_symbol = display_symbol

    @property
    def essence(self):
        """
        Gets the essence of this Unit.
        the essential definition of this unit.

        :return: The essence of this Unit.
        :rtype: UnitEssence
        """
        return self._essence

    @essence.setter
    def essence(self, essence):
        """
        Sets the essence of this Unit.
        the essential definition of this unit.

        :param essence: The essence of this Unit.
        :type: UnitEssence
        """

        self._essence = essence

    @property
    def last_modified(self):
        """
        Gets the last_modified of this Unit.
        The last modification date of this unit in the format YYYYMMDD.

        :return: The last_modified of this Unit.
        :rtype: str
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """
        Sets the last_modified of this Unit.
        The last modification date of this unit in the format YYYYMMDD.

        :param last_modified: The last_modified of this Unit.
        :type: str
        """

        self._last_modified = last_modified

    @property
    def name(self):
        """
        Gets the name of this Unit.
        The full name of this unit

        :return: The name of this Unit.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Unit.
        The full name of this unit

        :param name: The name of this Unit.
        :type: str
        """

        self._name = name

    @property
    def namespace(self):
        """
        Gets the namespace of this Unit.
        The namespace, in which this unit's symbol is unique. Example namespaces: 'Energistics_UoM', 'RP66', 'ECL', 'LIS'.

        :return: The namespace of this Unit.
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """
        Sets the namespace of this Unit.
        The namespace, in which this unit's symbol is unique. Example namespaces: 'Energistics_UoM', 'RP66', 'ECL', 'LIS'.

        :param namespace: The namespace of this Unit.
        :type: str
        """

        self._namespace = namespace

    @property
    def source(self):
        """
        Gets the source of this Unit.
        The source of this unit definition.

        :return: The source of this Unit.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """
        Sets the source of this Unit.
        The source of this unit definition.

        :param source: The source of this Unit.
        :type: str
        """

        self._source = source

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Unit):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
