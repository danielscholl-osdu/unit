# coding: utf-8

"""
    Unit Service API

    Unit and Measurement Service

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class VersionInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'artifact_id': 'str',
        'branch': 'str',
        'build_time': 'str',
        'commit_id': 'str',
        'commit_message': 'str',
        'connected_outer_services': 'list[ConnectedOuterService]',
        'group_id': 'str',
        'version': 'str'
    }

    attribute_map = {
        'artifact_id': 'artifactId',
        'branch': 'branch',
        'build_time': 'buildTime',
        'commit_id': 'commitId',
        'commit_message': 'commitMessage',
        'connected_outer_services': 'connectedOuterServices',
        'group_id': 'groupId',
        'version': 'version'
    }

    def __init__(self, artifact_id=None, branch=None, build_time=None, commit_id=None, commit_message=None, connected_outer_services=None, group_id=None, version=None):
        """
        VersionInfo - a model defined in Swagger
        """

        self._artifact_id = None
        self._branch = None
        self._build_time = None
        self._commit_id = None
        self._commit_message = None
        self._connected_outer_services = None
        self._group_id = None
        self._version = None

        if artifact_id is not None:
          self.artifact_id = artifact_id
        if branch is not None:
          self.branch = branch
        if build_time is not None:
          self.build_time = build_time
        if commit_id is not None:
          self.commit_id = commit_id
        if commit_message is not None:
          self.commit_message = commit_message
        if connected_outer_services is not None:
          self.connected_outer_services = connected_outer_services
        if group_id is not None:
          self.group_id = group_id
        if version is not None:
          self.version = version

    @property
    def artifact_id(self):
        """
        Gets the artifact_id of this VersionInfo.

        :return: The artifact_id of this VersionInfo.
        :rtype: str
        """
        return self._artifact_id

    @artifact_id.setter
    def artifact_id(self, artifact_id):
        """
        Sets the artifact_id of this VersionInfo.

        :param artifact_id: The artifact_id of this VersionInfo.
        :type: str
        """

        self._artifact_id = artifact_id

    @property
    def branch(self):
        """
        Gets the branch of this VersionInfo.

        :return: The branch of this VersionInfo.
        :rtype: str
        """
        return self._branch

    @branch.setter
    def branch(self, branch):
        """
        Sets the branch of this VersionInfo.

        :param branch: The branch of this VersionInfo.
        :type: str
        """

        self._branch = branch

    @property
    def build_time(self):
        """
        Gets the build_time of this VersionInfo.

        :return: The build_time of this VersionInfo.
        :rtype: str
        """
        return self._build_time

    @build_time.setter
    def build_time(self, build_time):
        """
        Sets the build_time of this VersionInfo.

        :param build_time: The build_time of this VersionInfo.
        :type: str
        """

        self._build_time = build_time

    @property
    def commit_id(self):
        """
        Gets the commit_id of this VersionInfo.

        :return: The commit_id of this VersionInfo.
        :rtype: str
        """
        return self._commit_id

    @commit_id.setter
    def commit_id(self, commit_id):
        """
        Sets the commit_id of this VersionInfo.

        :param commit_id: The commit_id of this VersionInfo.
        :type: str
        """

        self._commit_id = commit_id

    @property
    def commit_message(self):
        """
        Gets the commit_message of this VersionInfo.

        :return: The commit_message of this VersionInfo.
        :rtype: str
        """
        return self._commit_message

    @commit_message.setter
    def commit_message(self, commit_message):
        """
        Sets the commit_message of this VersionInfo.

        :param commit_message: The commit_message of this VersionInfo.
        :type: str
        """

        self._commit_message = commit_message

    @property
    def connected_outer_services(self):
        """
        Gets the connected_outer_services of this VersionInfo.

        :return: The connected_outer_services of this VersionInfo.
        :rtype: list[ConnectedOuterService]
        """
        return self._connected_outer_services

    @connected_outer_services.setter
    def connected_outer_services(self, connected_outer_services):
        """
        Sets the connected_outer_services of this VersionInfo.

        :param connected_outer_services: The connected_outer_services of this VersionInfo.
        :type: list[ConnectedOuterService]
        """

        self._connected_outer_services = connected_outer_services

    @property
    def group_id(self):
        """
        Gets the group_id of this VersionInfo.

        :return: The group_id of this VersionInfo.
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """
        Sets the group_id of this VersionInfo.

        :param group_id: The group_id of this VersionInfo.
        :type: str
        """

        self._group_id = group_id

    @property
    def version(self):
        """
        Gets the version of this VersionInfo.

        :return: The version of this VersionInfo.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """
        Sets the version of this VersionInfo.

        :param version: The version of this VersionInfo.
        :type: str
        """

        self._version = version

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, VersionInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
