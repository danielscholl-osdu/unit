# coding: utf-8

"""
    Unit Service API

    Unit and Measurement Service

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class MeasurementRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'persistable_reference': 'str',
        'essence': 'MeasurementEssence'
    }

    attribute_map = {
        'persistable_reference': 'persistableReference',
        'essence': 'essence'
    }

    def __init__(self, persistable_reference=None, essence=None):
        """
        MeasurementRequest - a model defined in Swagger
        """

        self._persistable_reference = None
        self._essence = None

        if persistable_reference is not None:
          self.persistable_reference = persistable_reference
        if essence is not None:
          self.essence = essence

    @property
    def persistable_reference(self):
        """
        Gets the persistable_reference of this MeasurementRequest.
        The persistable reference string for the measurement; optional, only one 'persistableReference' or 'essence' must be defined.

        :return: The persistable_reference of this MeasurementRequest.
        :rtype: str
        """
        return self._persistable_reference

    @persistable_reference.setter
    def persistable_reference(self, persistable_reference):
        """
        Sets the persistable_reference of this MeasurementRequest.
        The persistable reference string for the measurement; optional, only one 'persistableReference' or 'essence' must be defined.

        :param persistable_reference: The persistable_reference of this MeasurementRequest.
        :type: str
        """

        self._persistable_reference = persistable_reference

    @property
    def essence(self):
        """
        Gets the essence of this MeasurementRequest.
        The measurement essence.

        :return: The essence of this MeasurementRequest.
        :rtype: MeasurementEssence
        """
        return self._essence

    @essence.setter
    def essence(self, essence):
        """
        Sets the essence of this MeasurementRequest.
        The measurement essence.

        :param essence: The essence of this MeasurementRequest.
        :type: MeasurementEssence
        """

        self._essence = essence

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, MeasurementRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
