# coding: utf-8

"""
    Unit Service API

    Unit and Measurement Service

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Catalog(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'last_modified': 'datetime',
        'total_map_state_count': 'int',
        'map_states': 'list[MapState]',
        'total_measurement_map_count': 'int',
        'measurement_maps': 'list[MeasurementMap]',
        'total_measurement_count': 'int',
        'measurements': 'list[Measurement]',
        'total_unit_map_count': 'int',
        'unit_maps': 'list[UnitMap]',
        'total_unit_system_count': 'int',
        'unit_system_infos': 'list[UnitSystemInfoList]',
        'total_unit_count': 'int',
        'units': 'list[Unit]'
    }

    attribute_map = {
        'last_modified': 'lastModified',
        'total_map_state_count': 'totalMapStateCount',
        'map_states': 'mapStates',
        'total_measurement_map_count': 'totalMeasurementMapCount',
        'measurement_maps': 'measurementMaps',
        'total_measurement_count': 'totalMeasurementCount',
        'measurements': 'measurements',
        'total_unit_map_count': 'totalUnitMapCount',
        'unit_maps': 'unitMaps',
        'total_unit_system_count': 'totalUnitSystemCount',
        'unit_system_infos': 'unitSystemInfos',
        'total_unit_count': 'totalUnitCount',
        'units': 'units'
    }

    def __init__(self, last_modified=None, total_map_state_count=None, map_states=None, total_measurement_map_count=None, measurement_maps=None, total_measurement_count=None, measurements=None, total_unit_map_count=None, unit_maps=None, total_unit_system_count=None, unit_system_infos=None, total_unit_count=None, units=None):
        """
        Catalog - a model defined in Swagger
        """

        self._last_modified = None
        self._total_map_state_count = None
        self._map_states = None
        self._total_measurement_map_count = None
        self._measurement_maps = None
        self._total_measurement_count = None
        self._measurements = None
        self._total_unit_map_count = None
        self._unit_maps = None
        self._total_unit_system_count = None
        self._unit_system_infos = None
        self._total_unit_count = None
        self._units = None

        if last_modified is not None:
          self.last_modified = last_modified
        if total_map_state_count is not None:
          self.total_map_state_count = total_map_state_count
        if map_states is not None:
          self.map_states = map_states
        if total_measurement_map_count is not None:
          self.total_measurement_map_count = total_measurement_map_count
        if measurement_maps is not None:
          self.measurement_maps = measurement_maps
        if total_measurement_count is not None:
          self.total_measurement_count = total_measurement_count
        if measurements is not None:
          self.measurements = measurements
        if total_unit_map_count is not None:
          self.total_unit_map_count = total_unit_map_count
        if unit_maps is not None:
          self.unit_maps = unit_maps
        if total_unit_system_count is not None:
          self.total_unit_system_count = total_unit_system_count
        if unit_system_infos is not None:
          self.unit_system_infos = unit_system_infos
        if total_unit_count is not None:
          self.total_unit_count = total_unit_count
        if units is not None:
          self.units = units

    @property
    def last_modified(self):
        """
        Gets the last_modified of this Catalog.
        The unit of measure catalog's last modification date.

        :return: The last_modified of this Catalog.
        :rtype: datetime
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """
        Sets the last_modified of this Catalog.
        The unit of measure catalog's last modification date.

        :param last_modified: The last_modified of this Catalog.
        :type: datetime
        """

        self._last_modified = last_modified

    @property
    def total_map_state_count(self):
        """
        Gets the total_map_state_count of this Catalog.
        The number of MapState items known to this catalog.

        :return: The total_map_state_count of this Catalog.
        :rtype: int
        """
        return self._total_map_state_count

    @total_map_state_count.setter
    def total_map_state_count(self, total_map_state_count):
        """
        Sets the total_map_state_count of this Catalog.
        The number of MapState items known to this catalog.

        :param total_map_state_count: The total_map_state_count of this Catalog.
        :type: int
        """

        self._total_map_state_count = total_map_state_count

    @property
    def map_states(self):
        """
        Gets the map_states of this Catalog.
        The MapState items defined in this catalog.

        :return: The map_states of this Catalog.
        :rtype: list[MapState]
        """
        return self._map_states

    @map_states.setter
    def map_states(self, map_states):
        """
        Sets the map_states of this Catalog.
        The MapState items defined in this catalog.

        :param map_states: The map_states of this Catalog.
        :type: list[MapState]
        """

        self._map_states = map_states

    @property
    def total_measurement_map_count(self):
        """
        Gets the total_measurement_map_count of this Catalog.
        The number of measurement maps, i.e. one-directional links/correspondences of measurement pairs defined in this catalog.

        :return: The total_measurement_map_count of this Catalog.
        :rtype: int
        """
        return self._total_measurement_map_count

    @total_measurement_map_count.setter
    def total_measurement_map_count(self, total_measurement_map_count):
        """
        Sets the total_measurement_map_count of this Catalog.
        The number of measurement maps, i.e. one-directional links/correspondences of measurement pairs defined in this catalog.

        :param total_measurement_map_count: The total_measurement_map_count of this Catalog.
        :type: int
        """

        self._total_measurement_map_count = total_measurement_map_count

    @property
    def measurement_maps(self):
        """
        Gets the measurement_maps of this Catalog.
        The array of measurement maps, i.e. one-directional links/correspondences of measurement pairs defined in this catalog.

        :return: The measurement_maps of this Catalog.
        :rtype: list[MeasurementMap]
        """
        return self._measurement_maps

    @measurement_maps.setter
    def measurement_maps(self, measurement_maps):
        """
        Sets the measurement_maps of this Catalog.
        The array of measurement maps, i.e. one-directional links/correspondences of measurement pairs defined in this catalog.

        :param measurement_maps: The measurement_maps of this Catalog.
        :type: list[MeasurementMap]
        """

        self._measurement_maps = measurement_maps

    @property
    def total_measurement_count(self):
        """
        Gets the total_measurement_count of this Catalog.
        The number of measurements - base measurements/dimensions and child measurements, defined in this catalog.

        :return: The total_measurement_count of this Catalog.
        :rtype: int
        """
        return self._total_measurement_count

    @total_measurement_count.setter
    def total_measurement_count(self, total_measurement_count):
        """
        Sets the total_measurement_count of this Catalog.
        The number of measurements - base measurements/dimensions and child measurements, defined in this catalog.

        :param total_measurement_count: The total_measurement_count of this Catalog.
        :type: int
        """

        self._total_measurement_count = total_measurement_count

    @property
    def measurements(self):
        """
        Gets the measurements of this Catalog.
        The array of measurements, i.e. base measurements/dimensions and child measurements defined in this catalog.

        :return: The measurements of this Catalog.
        :rtype: list[Measurement]
        """
        return self._measurements

    @measurements.setter
    def measurements(self, measurements):
        """
        Sets the measurements of this Catalog.
        The array of measurements, i.e. base measurements/dimensions and child measurements defined in this catalog.

        :param measurements: The measurements of this Catalog.
        :type: list[Measurement]
        """

        self._measurements = measurements

    @property
    def total_unit_map_count(self):
        """
        Gets the total_unit_map_count of this Catalog.
        The number of unit maps, i.e. one-directional links/correspondences of unit pairs defined in this catalog.

        :return: The total_unit_map_count of this Catalog.
        :rtype: int
        """
        return self._total_unit_map_count

    @total_unit_map_count.setter
    def total_unit_map_count(self, total_unit_map_count):
        """
        Sets the total_unit_map_count of this Catalog.
        The number of unit maps, i.e. one-directional links/correspondences of unit pairs defined in this catalog.

        :param total_unit_map_count: The total_unit_map_count of this Catalog.
        :type: int
        """

        self._total_unit_map_count = total_unit_map_count

    @property
    def unit_maps(self):
        """
        Gets the unit_maps of this Catalog.
        The unit maps, i.e. one-directional links/correspondences of unit pairs defined in this catalog.

        :return: The unit_maps of this Catalog.
        :rtype: list[UnitMap]
        """
        return self._unit_maps

    @unit_maps.setter
    def unit_maps(self, unit_maps):
        """
        Sets the unit_maps of this Catalog.
        The unit maps, i.e. one-directional links/correspondences of unit pairs defined in this catalog.

        :param unit_maps: The unit_maps of this Catalog.
        :type: list[UnitMap]
        """

        self._unit_maps = unit_maps

    @property
    def total_unit_system_count(self):
        """
        Gets the total_unit_system_count of this Catalog.
        The number of unit systems defined in this catalog.

        :return: The total_unit_system_count of this Catalog.
        :rtype: int
        """
        return self._total_unit_system_count

    @total_unit_system_count.setter
    def total_unit_system_count(self, total_unit_system_count):
        """
        Sets the total_unit_system_count of this Catalog.
        The number of unit systems defined in this catalog.

        :param total_unit_system_count: The total_unit_system_count of this Catalog.
        :type: int
        """

        self._total_unit_system_count = total_unit_system_count

    @property
    def unit_system_infos(self):
        """
        Gets the unit_system_infos of this Catalog.
        The array of unit systems defined in this catalog.

        :return: The unit_system_infos of this Catalog.
        :rtype: list[UnitSystemInfoList]
        """
        return self._unit_system_infos

    @unit_system_infos.setter
    def unit_system_infos(self, unit_system_infos):
        """
        Sets the unit_system_infos of this Catalog.
        The array of unit systems defined in this catalog.

        :param unit_system_infos: The unit_system_infos of this Catalog.
        :type: list[UnitSystemInfoList]
        """

        self._unit_system_infos = unit_system_infos

    @property
    def total_unit_count(self):
        """
        Gets the total_unit_count of this Catalog.
        The number of units defined in this catalog.

        :return: The total_unit_count of this Catalog.
        :rtype: int
        """
        return self._total_unit_count

    @total_unit_count.setter
    def total_unit_count(self, total_unit_count):
        """
        Sets the total_unit_count of this Catalog.
        The number of units defined in this catalog.

        :param total_unit_count: The total_unit_count of this Catalog.
        :type: int
        """

        self._total_unit_count = total_unit_count

    @property
    def units(self):
        """
        Gets the units of this Catalog.
        The array of units defined in this catalog.

        :return: The units of this Catalog.
        :rtype: list[Unit]
        """
        return self._units

    @units.setter
    def units(self, units):
        """
        Sets the units of this Catalog.
        The array of units defined in this catalog.

        :param units: The units of this Catalog.
        :type: list[Unit]
        """

        self._units = units

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Catalog):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
