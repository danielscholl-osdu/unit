# coding: utf-8

"""
    Unit Service API

    Unit and Measurement Service

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class UnitSystem(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ancestry': 'str',
        'description': 'str',
        'last_modified': 'str',
        'name': 'str',
        'reference_unit_system': 'str',
        'source': 'str',
        'offset': 'int',
        'unit_assignment_count_total': 'int',
        'unit_assignment_count_in_response': 'int',
        'unit_assignments': 'list[UnitAssignment]'
    }

    attribute_map = {
        'ancestry': 'ancestry',
        'description': 'description',
        'last_modified': 'lastModified',
        'name': 'name',
        'reference_unit_system': 'referenceUnitSystem',
        'source': 'source',
        'offset': 'offset',
        'unit_assignment_count_total': 'unitAssignmentCountTotal',
        'unit_assignment_count_in_response': 'unitAssignmentCountInResponse',
        'unit_assignments': 'unitAssignments'
    }

    def __init__(self, ancestry=None, description=None, last_modified=None, name=None, reference_unit_system=None, source=None, offset=None, unit_assignment_count_total=None, unit_assignment_count_in_response=None, unit_assignments=None):
        """
        UnitSystem - a model defined in Swagger
        """

        self._ancestry = None
        self._description = None
        self._last_modified = None
        self._name = None
        self._reference_unit_system = None
        self._source = None
        self._offset = None
        self._unit_assignment_count_total = None
        self._unit_assignment_count_in_response = None
        self._unit_assignments = None

        if ancestry is not None:
          self.ancestry = ancestry
        if description is not None:
          self.description = description
        if last_modified is not None:
          self.last_modified = last_modified
        if name is not None:
          self.name = name
        if reference_unit_system is not None:
          self.reference_unit_system = reference_unit_system
        if source is not None:
          self.source = source
        if offset is not None:
          self.offset = offset
        if unit_assignment_count_total is not None:
          self.unit_assignment_count_total = unit_assignment_count_total
        if unit_assignment_count_in_response is not None:
          self.unit_assignment_count_in_response = unit_assignment_count_in_response
        if unit_assignments is not None:
          self.unit_assignments = unit_assignments

    @property
    def ancestry(self):
        """
        Gets the ancestry of this UnitSystem.
        The full ancestry of this unit system.

        :return: The ancestry of this UnitSystem.
        :rtype: str
        """
        return self._ancestry

    @ancestry.setter
    def ancestry(self, ancestry):
        """
        Sets the ancestry of this UnitSystem.
        The full ancestry of this unit system.

        :param ancestry: The ancestry of this UnitSystem.
        :type: str
        """

        self._ancestry = ancestry

    @property
    def description(self):
        """
        Gets the description of this UnitSystem.
        Any further description of this unit system.

        :return: The description of this UnitSystem.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this UnitSystem.
        Any further description of this unit system.

        :param description: The description of this UnitSystem.
        :type: str
        """

        self._description = description

    @property
    def last_modified(self):
        """
        Gets the last_modified of this UnitSystem.
        The last modification of this unit system core properties formatted as YYYYMMDD.

        :return: The last_modified of this UnitSystem.
        :rtype: str
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """
        Sets the last_modified of this UnitSystem.
        The last modification of this unit system core properties formatted as YYYYMMDD.

        :param last_modified: The last_modified of this UnitSystem.
        :type: str
        """

        self._last_modified = last_modified

    @property
    def name(self):
        """
        Gets the name of this UnitSystem.
        The name of this unit system.

        :return: The name of this UnitSystem.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this UnitSystem.
        The name of this unit system.

        :param name: The name of this UnitSystem.
        :type: str
        """

        self._name = name

    @property
    def reference_unit_system(self):
        """
        Gets the reference_unit_system of this UnitSystem.
        The unit system code, from which this unit system is derived - or a blank string.

        :return: The reference_unit_system of this UnitSystem.
        :rtype: str
        """
        return self._reference_unit_system

    @reference_unit_system.setter
    def reference_unit_system(self, reference_unit_system):
        """
        Sets the reference_unit_system of this UnitSystem.
        The unit system code, from which this unit system is derived - or a blank string.

        :param reference_unit_system: The reference_unit_system of this UnitSystem.
        :type: str
        """

        self._reference_unit_system = reference_unit_system

    @property
    def source(self):
        """
        Gets the source of this UnitSystem.
        Source of the unit system definition.

        :return: The source of this UnitSystem.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """
        Sets the source of this UnitSystem.
        Source of the unit system definition.

        :param source: The source of this UnitSystem.
        :type: str
        """

        self._source = source

    @property
    def offset(self):
        """
        Gets the offset of this UnitSystem.
        The offset into the unit assignment list as defined in the request.

        :return: The offset of this UnitSystem.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """
        Sets the offset of this UnitSystem.
        The offset into the unit assignment list as defined in the request.

        :param offset: The offset of this UnitSystem.
        :type: int
        """

        self._offset = offset

    @property
    def unit_assignment_count_total(self):
        """
        Gets the unit_assignment_count_total of this UnitSystem.
        The total number of unit assignments provided by this unit system.

        :return: The unit_assignment_count_total of this UnitSystem.
        :rtype: int
        """
        return self._unit_assignment_count_total

    @unit_assignment_count_total.setter
    def unit_assignment_count_total(self, unit_assignment_count_total):
        """
        Sets the unit_assignment_count_total of this UnitSystem.
        The total number of unit assignments provided by this unit system.

        :param unit_assignment_count_total: The unit_assignment_count_total of this UnitSystem.
        :type: int
        """

        self._unit_assignment_count_total = unit_assignment_count_total

    @property
    def unit_assignment_count_in_response(self):
        """
        Gets the unit_assignment_count_in_response of this UnitSystem.
        The actual number of unit assignments delivered in this response.

        :return: The unit_assignment_count_in_response of this UnitSystem.
        :rtype: int
        """
        return self._unit_assignment_count_in_response

    @unit_assignment_count_in_response.setter
    def unit_assignment_count_in_response(self, unit_assignment_count_in_response):
        """
        Sets the unit_assignment_count_in_response of this UnitSystem.
        The actual number of unit assignments delivered in this response.

        :param unit_assignment_count_in_response: The unit_assignment_count_in_response of this UnitSystem.
        :type: int
        """

        self._unit_assignment_count_in_response = unit_assignment_count_in_response

    @property
    def unit_assignments(self):
        """
        Gets the unit_assignments of this UnitSystem.
        The unit assignments provided by this unit system.

        :return: The unit_assignments of this UnitSystem.
        :rtype: list[UnitAssignment]
        """
        return self._unit_assignments

    @unit_assignments.setter
    def unit_assignments(self, unit_assignments):
        """
        Sets the unit_assignments of this UnitSystem.
        The unit assignments provided by this unit system.

        :param unit_assignments: The unit_assignments of this UnitSystem.
        :type: list[UnitAssignment]
        """

        self._unit_assignments = unit_assignments

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, UnitSystem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
