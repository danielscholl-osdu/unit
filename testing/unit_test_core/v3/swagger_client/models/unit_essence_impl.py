# coding: utf-8

"""
    Unit API V3

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class UnitEssenceImpl(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'abcd': 'ABCDImpl',
        'base_measurement': 'MeasurementEssenceImpl',
        'scale_offset': 'ScaleOffsetImpl',
        'symbol': 'str',
        'type': 'str'
    }

    attribute_map = {
        'abcd': 'abcd',
        'base_measurement': 'baseMeasurement',
        'scale_offset': 'scaleOffset',
        'symbol': 'symbol',
        'type': 'type'
    }

    def __init__(self, abcd=None, base_measurement=None, scale_offset=None, symbol=None, type=None):
        """
        UnitEssenceImpl - a model defined in Swagger
        """

        self._abcd = None
        self._base_measurement = None
        self._scale_offset = None
        self._symbol = None
        self._type = None

        if abcd is not None:
          self.abcd = abcd
        if base_measurement is not None:
          self.base_measurement = base_measurement
        if scale_offset is not None:
          self.scale_offset = scale_offset
        if symbol is not None:
          self.symbol = symbol
        if type is not None:
          self.type = type

    @property
    def abcd(self):
        """
        Gets the abcd of this UnitEssenceImpl.

        :return: The abcd of this UnitEssenceImpl.
        :rtype: ABCDImpl
        """
        return self._abcd

    @abcd.setter
    def abcd(self, abcd):
        """
        Sets the abcd of this UnitEssenceImpl.

        :param abcd: The abcd of this UnitEssenceImpl.
        :type: ABCDImpl
        """

        self._abcd = abcd

    @property
    def base_measurement(self):
        """
        Gets the base_measurement of this UnitEssenceImpl.

        :return: The base_measurement of this UnitEssenceImpl.
        :rtype: MeasurementEssenceImpl
        """
        return self._base_measurement

    @base_measurement.setter
    def base_measurement(self, base_measurement):
        """
        Sets the base_measurement of this UnitEssenceImpl.

        :param base_measurement: The base_measurement of this UnitEssenceImpl.
        :type: MeasurementEssenceImpl
        """

        self._base_measurement = base_measurement

    @property
    def scale_offset(self):
        """
        Gets the scale_offset of this UnitEssenceImpl.

        :return: The scale_offset of this UnitEssenceImpl.
        :rtype: ScaleOffsetImpl
        """
        return self._scale_offset

    @scale_offset.setter
    def scale_offset(self, scale_offset):
        """
        Sets the scale_offset of this UnitEssenceImpl.

        :param scale_offset: The scale_offset of this UnitEssenceImpl.
        :type: ScaleOffsetImpl
        """

        self._scale_offset = scale_offset

    @property
    def symbol(self):
        """
        Gets the symbol of this UnitEssenceImpl.

        :return: The symbol of this UnitEssenceImpl.
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """
        Sets the symbol of this UnitEssenceImpl.

        :param symbol: The symbol of this UnitEssenceImpl.
        :type: str
        """

        self._symbol = symbol

    @property
    def type(self):
        """
        Gets the type of this UnitEssenceImpl.

        :return: The type of this UnitEssenceImpl.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this UnitEssenceImpl.

        :param type: The type of this UnitEssenceImpl.
        :type: str
        """

        self._type = type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, UnitEssenceImpl):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
