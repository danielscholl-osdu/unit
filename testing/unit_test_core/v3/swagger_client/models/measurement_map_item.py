# coding: utf-8

"""
    Unit API V3

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class MeasurementMapItem(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'from_measurement': 'Measurement',
        'from_namespace': 'str',
        'note': 'str',
        'state': 'str',
        'to_measurement': 'Measurement',
        'to_namespace': 'str'
    }

    attribute_map = {
        'from_measurement': 'fromMeasurement',
        'from_namespace': 'fromNamespace',
        'note': 'note',
        'state': 'state',
        'to_measurement': 'toMeasurement',
        'to_namespace': 'toNamespace'
    }

    def __init__(self, from_measurement=None, from_namespace=None, note=None, state=None, to_measurement=None, to_namespace=None):
        """
        MeasurementMapItem - a model defined in Swagger
        """

        self._from_measurement = None
        self._from_namespace = None
        self._note = None
        self._state = None
        self._to_measurement = None
        self._to_namespace = None

        if from_measurement is not None:
          self.from_measurement = from_measurement
        if from_namespace is not None:
          self.from_namespace = from_namespace
        if note is not None:
          self.note = note
        if state is not None:
          self.state = state
        if to_measurement is not None:
          self.to_measurement = to_measurement
        if to_namespace is not None:
          self.to_namespace = to_namespace

    @property
    def from_measurement(self):
        """
        Gets the from_measurement of this MeasurementMapItem.

        :return: The from_measurement of this MeasurementMapItem.
        :rtype: Measurement
        """
        return self._from_measurement

    @from_measurement.setter
    def from_measurement(self, from_measurement):
        """
        Sets the from_measurement of this MeasurementMapItem.

        :param from_measurement: The from_measurement of this MeasurementMapItem.
        :type: Measurement
        """

        self._from_measurement = from_measurement

    @property
    def from_namespace(self):
        """
        Gets the from_namespace of this MeasurementMapItem.

        :return: The from_namespace of this MeasurementMapItem.
        :rtype: str
        """
        return self._from_namespace

    @from_namespace.setter
    def from_namespace(self, from_namespace):
        """
        Sets the from_namespace of this MeasurementMapItem.

        :param from_namespace: The from_namespace of this MeasurementMapItem.
        :type: str
        """

        self._from_namespace = from_namespace

    @property
    def note(self):
        """
        Gets the note of this MeasurementMapItem.

        :return: The note of this MeasurementMapItem.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """
        Sets the note of this MeasurementMapItem.

        :param note: The note of this MeasurementMapItem.
        :type: str
        """

        self._note = note

    @property
    def state(self):
        """
        Gets the state of this MeasurementMapItem.

        :return: The state of this MeasurementMapItem.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this MeasurementMapItem.

        :param state: The state of this MeasurementMapItem.
        :type: str
        """

        self._state = state

    @property
    def to_measurement(self):
        """
        Gets the to_measurement of this MeasurementMapItem.

        :return: The to_measurement of this MeasurementMapItem.
        :rtype: Measurement
        """
        return self._to_measurement

    @to_measurement.setter
    def to_measurement(self, to_measurement):
        """
        Sets the to_measurement of this MeasurementMapItem.

        :param to_measurement: The to_measurement of this MeasurementMapItem.
        :type: Measurement
        """

        self._to_measurement = to_measurement

    @property
    def to_namespace(self):
        """
        Gets the to_namespace of this MeasurementMapItem.

        :return: The to_namespace of this MeasurementMapItem.
        :rtype: str
        """
        return self._to_namespace

    @to_namespace.setter
    def to_namespace(self, to_namespace):
        """
        Sets the to_namespace of this MeasurementMapItem.

        :param to_namespace: The to_namespace of this MeasurementMapItem.
        :type: str
        """

        self._to_namespace = to_namespace

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, MeasurementMapItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
