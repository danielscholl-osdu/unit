# coding: utf-8

"""
    Unit API V3

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class Unitapiv3Api(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def get_catalog_using_get(self, data_partition_id, **kwargs):
        """
        getCatalog
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_catalog_using_get(data_partition_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str data_partition_id: tenant (required)
        :return: Catalog
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_catalog_using_get_with_http_info(data_partition_id, **kwargs)
        else:
            (data) = self.get_catalog_using_get_with_http_info(data_partition_id, **kwargs)
            return data

    def get_catalog_using_get_with_http_info(self, data_partition_id, **kwargs):
        """
        getCatalog
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_catalog_using_get_with_http_info(data_partition_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str data_partition_id: tenant (required)
        :return: Catalog
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data_partition_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_catalog_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data_partition_id' is set
        if ('data_partition_id' not in params) or (params['data_partition_id'] is None):
            raise ValueError("Missing the required parameter `data_partition_id` when calling `get_catalog_using_get`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'data_partition_id' in params:
            header_params['data-partition-id'] = params['data_partition_id']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer Authorization']

        return self.api_client.call_api('/v3/catalog', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Catalog',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_conversion_abcd_by_symbols_using_get(self, data_partition_id, namespaces, from_symbol, to_symbol, **kwargs):
        """
        getConversionABCDBySymbols
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_conversion_abcd_by_symbols_using_get(data_partition_id, namespaces, from_symbol, to_symbol, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str data_partition_id: tenant (required)
        :param str namespaces: namespaces (required)
        :param str from_symbol: fromSymbol (required)
        :param str to_symbol: toSymbol (required)
        :return: ConversionResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_conversion_abcd_by_symbols_using_get_with_http_info(data_partition_id, namespaces, from_symbol, to_symbol, **kwargs)
        else:
            (data) = self.get_conversion_abcd_by_symbols_using_get_with_http_info(data_partition_id, namespaces, from_symbol, to_symbol, **kwargs)
            return data

    def get_conversion_abcd_by_symbols_using_get_with_http_info(self, data_partition_id, namespaces, from_symbol, to_symbol, **kwargs):
        """
        getConversionABCDBySymbols
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_conversion_abcd_by_symbols_using_get_with_http_info(data_partition_id, namespaces, from_symbol, to_symbol, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str data_partition_id: tenant (required)
        :param str namespaces: namespaces (required)
        :param str from_symbol: fromSymbol (required)
        :param str to_symbol: toSymbol (required)
        :return: ConversionResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data_partition_id', 'namespaces', 'from_symbol', 'to_symbol']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_conversion_abcd_by_symbols_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data_partition_id' is set
        if ('data_partition_id' not in params) or (params['data_partition_id'] is None):
            raise ValueError("Missing the required parameter `data_partition_id` when calling `get_conversion_abcd_by_symbols_using_get`")
        # verify the required parameter 'namespaces' is set
        if ('namespaces' not in params) or (params['namespaces'] is None):
            raise ValueError("Missing the required parameter `namespaces` when calling `get_conversion_abcd_by_symbols_using_get`")
        # verify the required parameter 'from_symbol' is set
        if ('from_symbol' not in params) or (params['from_symbol'] is None):
            raise ValueError("Missing the required parameter `from_symbol` when calling `get_conversion_abcd_by_symbols_using_get`")
        # verify the required parameter 'to_symbol' is set
        if ('to_symbol' not in params) or (params['to_symbol'] is None):
            raise ValueError("Missing the required parameter `to_symbol` when calling `get_conversion_abcd_by_symbols_using_get`")


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'namespaces' in params:
            query_params.append(('namespaces', params['namespaces']))
        if 'from_symbol' in params:
            query_params.append(('fromSymbol', params['from_symbol']))
        if 'to_symbol' in params:
            query_params.append(('toSymbol', params['to_symbol']))

        header_params = {}
        if 'data_partition_id' in params:
            header_params['data-partition-id'] = params['data_partition_id']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer Authorization']

        return self.api_client.call_api('/v3/conversion/abcd', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ConversionResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_conversion_scale_offset_by_symbols_using_get(self, data_partition_id, namespaces, from_symbol, to_symbol, **kwargs):
        """
        getConversionScaleOffsetBySymbols
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_conversion_scale_offset_by_symbols_using_get(data_partition_id, namespaces, from_symbol, to_symbol, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str data_partition_id: tenant (required)
        :param str namespaces: namespaces (required)
        :param str from_symbol: fromSymbol (required)
        :param str to_symbol: toSymbol (required)
        :return: ConversionResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_conversion_scale_offset_by_symbols_using_get_with_http_info(data_partition_id, namespaces, from_symbol, to_symbol, **kwargs)
        else:
            (data) = self.get_conversion_scale_offset_by_symbols_using_get_with_http_info(data_partition_id, namespaces, from_symbol, to_symbol, **kwargs)
            return data

    def get_conversion_scale_offset_by_symbols_using_get_with_http_info(self, data_partition_id, namespaces, from_symbol, to_symbol, **kwargs):
        """
        getConversionScaleOffsetBySymbols
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_conversion_scale_offset_by_symbols_using_get_with_http_info(data_partition_id, namespaces, from_symbol, to_symbol, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str data_partition_id: tenant (required)
        :param str namespaces: namespaces (required)
        :param str from_symbol: fromSymbol (required)
        :param str to_symbol: toSymbol (required)
        :return: ConversionResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data_partition_id', 'namespaces', 'from_symbol', 'to_symbol']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_conversion_scale_offset_by_symbols_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data_partition_id' is set
        if ('data_partition_id' not in params) or (params['data_partition_id'] is None):
            raise ValueError("Missing the required parameter `data_partition_id` when calling `get_conversion_scale_offset_by_symbols_using_get`")
        # verify the required parameter 'namespaces' is set
        if ('namespaces' not in params) or (params['namespaces'] is None):
            raise ValueError("Missing the required parameter `namespaces` when calling `get_conversion_scale_offset_by_symbols_using_get`")
        # verify the required parameter 'from_symbol' is set
        if ('from_symbol' not in params) or (params['from_symbol'] is None):
            raise ValueError("Missing the required parameter `from_symbol` when calling `get_conversion_scale_offset_by_symbols_using_get`")
        # verify the required parameter 'to_symbol' is set
        if ('to_symbol' not in params) or (params['to_symbol'] is None):
            raise ValueError("Missing the required parameter `to_symbol` when calling `get_conversion_scale_offset_by_symbols_using_get`")


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'namespaces' in params:
            query_params.append(('namespaces', params['namespaces']))
        if 'from_symbol' in params:
            query_params.append(('fromSymbol', params['from_symbol']))
        if 'to_symbol' in params:
            query_params.append(('toSymbol', params['to_symbol']))

        header_params = {}
        if 'data_partition_id' in params:
            header_params['data-partition-id'] = params['data_partition_id']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer Authorization']

        return self.api_client.call_api('/v3/conversion/scale', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ConversionResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_last_modified_using_get(self, data_partition_id, **kwargs):
        """
        getLastModified
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_last_modified_using_get(data_partition_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str data_partition_id: tenant (required)
        :return: CatalogLastModified
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_last_modified_using_get_with_http_info(data_partition_id, **kwargs)
        else:
            (data) = self.get_last_modified_using_get_with_http_info(data_partition_id, **kwargs)
            return data

    def get_last_modified_using_get_with_http_info(self, data_partition_id, **kwargs):
        """
        getLastModified
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_last_modified_using_get_with_http_info(data_partition_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str data_partition_id: tenant (required)
        :return: CatalogLastModified
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data_partition_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_last_modified_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data_partition_id' is set
        if ('data_partition_id' not in params) or (params['data_partition_id'] is None):
            raise ValueError("Missing the required parameter `data_partition_id` when calling `get_last_modified_using_get`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'data_partition_id' in params:
            header_params['data-partition-id'] = params['data_partition_id']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer Authorization']

        return self.api_client.call_api('/v3/catalog/lastmodified', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CatalogLastModified',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_map_states_using_get(self, data_partition_id, **kwargs):
        """
        getMapStates
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_map_states_using_get(data_partition_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str data_partition_id: tenant (required)
        :param int offset: offset
        :param int limit: limit
        :return: QueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_map_states_using_get_with_http_info(data_partition_id, **kwargs)
        else:
            (data) = self.get_map_states_using_get_with_http_info(data_partition_id, **kwargs)
            return data

    def get_map_states_using_get_with_http_info(self, data_partition_id, **kwargs):
        """
        getMapStates
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_map_states_using_get_with_http_info(data_partition_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str data_partition_id: tenant (required)
        :param int offset: offset
        :param int limit: limit
        :return: QueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data_partition_id', 'offset', 'limit']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_map_states_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data_partition_id' is set
        if ('data_partition_id' not in params) or (params['data_partition_id'] is None):
            raise ValueError("Missing the required parameter `data_partition_id` when calling `get_map_states_using_get`")


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))
        if 'limit' in params:
            query_params.append(('limit', params['limit']))

        header_params = {}
        if 'data_partition_id' in params:
            header_params['data-partition-id'] = params['data_partition_id']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer Authorization']

        return self.api_client.call_api('/v3/catalog/mapstates', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='QueryResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_measurement_maps_using_get(self, data_partition_id, **kwargs):
        """
        getMeasurementMaps
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_measurement_maps_using_get(data_partition_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str data_partition_id: tenant (required)
        :param int offset: offset
        :param int limit: limit
        :return: QueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_measurement_maps_using_get_with_http_info(data_partition_id, **kwargs)
        else:
            (data) = self.get_measurement_maps_using_get_with_http_info(data_partition_id, **kwargs)
            return data

    def get_measurement_maps_using_get_with_http_info(self, data_partition_id, **kwargs):
        """
        getMeasurementMaps
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_measurement_maps_using_get_with_http_info(data_partition_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str data_partition_id: tenant (required)
        :param int offset: offset
        :param int limit: limit
        :return: QueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data_partition_id', 'offset', 'limit']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_measurement_maps_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data_partition_id' is set
        if ('data_partition_id' not in params) or (params['data_partition_id'] is None):
            raise ValueError("Missing the required parameter `data_partition_id` when calling `get_measurement_maps_using_get`")


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))
        if 'limit' in params:
            query_params.append(('limit', params['limit']))

        header_params = {}
        if 'data_partition_id' in params:
            header_params['data-partition-id'] = params['data_partition_id']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer Authorization']

        return self.api_client.call_api('/v3/measurement/maps', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='QueryResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_measurement_using_get(self, data_partition_id, ancestry, **kwargs):
        """
        getMeasurement
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_measurement_using_get(data_partition_id, ancestry, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str data_partition_id: tenant (required)
        :param str ancestry: ancestry (required)
        :return: Measurement
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_measurement_using_get_with_http_info(data_partition_id, ancestry, **kwargs)
        else:
            (data) = self.get_measurement_using_get_with_http_info(data_partition_id, ancestry, **kwargs)
            return data

    def get_measurement_using_get_with_http_info(self, data_partition_id, ancestry, **kwargs):
        """
        getMeasurement
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_measurement_using_get_with_http_info(data_partition_id, ancestry, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str data_partition_id: tenant (required)
        :param str ancestry: ancestry (required)
        :return: Measurement
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data_partition_id', 'ancestry']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_measurement_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data_partition_id' is set
        if ('data_partition_id' not in params) or (params['data_partition_id'] is None):
            raise ValueError("Missing the required parameter `data_partition_id` when calling `get_measurement_using_get`")
        # verify the required parameter 'ancestry' is set
        if ('ancestry' not in params) or (params['ancestry'] is None):
            raise ValueError("Missing the required parameter `ancestry` when calling `get_measurement_using_get`")


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ancestry' in params:
            query_params.append(('ancestry', params['ancestry']))

        header_params = {}
        if 'data_partition_id' in params:
            header_params['data-partition-id'] = params['data_partition_id']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer Authorization']

        return self.api_client.call_api('/v3/measurement', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Measurement',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_measurements_using_get(self, data_partition_id, **kwargs):
        """
        getMeasurements
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_measurements_using_get(data_partition_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str data_partition_id: tenant (required)
        :param int offset: offset
        :param int limit: limit
        :return: QueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_measurements_using_get_with_http_info(data_partition_id, **kwargs)
        else:
            (data) = self.get_measurements_using_get_with_http_info(data_partition_id, **kwargs)
            return data

    def get_measurements_using_get_with_http_info(self, data_partition_id, **kwargs):
        """
        getMeasurements
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_measurements_using_get_with_http_info(data_partition_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str data_partition_id: tenant (required)
        :param int offset: offset
        :param int limit: limit
        :return: QueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data_partition_id', 'offset', 'limit']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_measurements_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data_partition_id' is set
        if ('data_partition_id' not in params) or (params['data_partition_id'] is None):
            raise ValueError("Missing the required parameter `data_partition_id` when calling `get_measurements_using_get`")


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))
        if 'limit' in params:
            query_params.append(('limit', params['limit']))

        header_params = {}
        if 'data_partition_id' in params:
            header_params['data-partition-id'] = params['data_partition_id']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer Authorization']

        return self.api_client.call_api('/v3/measurement/list', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='QueryResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_preferred_units_by_measurement_using_get(self, data_partition_id, ancestry, **kwargs):
        """
        getPreferredUnitsByMeasurement
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_preferred_units_by_measurement_using_get(data_partition_id, ancestry, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str data_partition_id: tenant (required)
        :param str ancestry: ancestry (required)
        :return: QueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_preferred_units_by_measurement_using_get_with_http_info(data_partition_id, ancestry, **kwargs)
        else:
            (data) = self.get_preferred_units_by_measurement_using_get_with_http_info(data_partition_id, ancestry, **kwargs)
            return data

    def get_preferred_units_by_measurement_using_get_with_http_info(self, data_partition_id, ancestry, **kwargs):
        """
        getPreferredUnitsByMeasurement
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_preferred_units_by_measurement_using_get_with_http_info(data_partition_id, ancestry, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str data_partition_id: tenant (required)
        :param str ancestry: ancestry (required)
        :return: QueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data_partition_id', 'ancestry']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_preferred_units_by_measurement_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data_partition_id' is set
        if ('data_partition_id' not in params) or (params['data_partition_id'] is None):
            raise ValueError("Missing the required parameter `data_partition_id` when calling `get_preferred_units_by_measurement_using_get`")
        # verify the required parameter 'ancestry' is set
        if ('ancestry' not in params) or (params['ancestry'] is None):
            raise ValueError("Missing the required parameter `ancestry` when calling `get_preferred_units_by_measurement_using_get`")


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ancestry' in params:
            query_params.append(('ancestry', params['ancestry']))

        header_params = {}
        if 'data_partition_id' in params:
            header_params['data-partition-id'] = params['data_partition_id']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer Authorization']

        return self.api_client.call_api('/v3/unit/measurement/preferred', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='QueryResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_unit_by_symbol_using_get(self, data_partition_id, namespaces, symbol, **kwargs):
        """
        getUnitBySymbol
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_unit_by_symbol_using_get(data_partition_id, namespaces, symbol, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str data_partition_id: tenant (required)
        :param str namespaces: namespaces (required)
        :param str symbol: symbol (required)
        :return: Unit
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_unit_by_symbol_using_get_with_http_info(data_partition_id, namespaces, symbol, **kwargs)
        else:
            (data) = self.get_unit_by_symbol_using_get_with_http_info(data_partition_id, namespaces, symbol, **kwargs)
            return data

    def get_unit_by_symbol_using_get_with_http_info(self, data_partition_id, namespaces, symbol, **kwargs):
        """
        getUnitBySymbol
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_unit_by_symbol_using_get_with_http_info(data_partition_id, namespaces, symbol, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str data_partition_id: tenant (required)
        :param str namespaces: namespaces (required)
        :param str symbol: symbol (required)
        :return: Unit
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data_partition_id', 'namespaces', 'symbol']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_unit_by_symbol_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data_partition_id' is set
        if ('data_partition_id' not in params) or (params['data_partition_id'] is None):
            raise ValueError("Missing the required parameter `data_partition_id` when calling `get_unit_by_symbol_using_get`")
        # verify the required parameter 'namespaces' is set
        if ('namespaces' not in params) or (params['namespaces'] is None):
            raise ValueError("Missing the required parameter `namespaces` when calling `get_unit_by_symbol_using_get`")
        # verify the required parameter 'symbol' is set
        if ('symbol' not in params) or (params['symbol'] is None):
            raise ValueError("Missing the required parameter `symbol` when calling `get_unit_by_symbol_using_get`")


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'namespaces' in params:
            query_params.append(('namespaces', params['namespaces']))
        if 'symbol' in params:
            query_params.append(('symbol', params['symbol']))

        header_params = {}
        if 'data_partition_id' in params:
            header_params['data-partition-id'] = params['data_partition_id']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer Authorization']

        return self.api_client.call_api('/v3/unit/symbol', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Unit',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_unit_by_system_and_measurement_using_get(self, data_partition_id, unit_system_name, ancestry, **kwargs):
        """
        getUnitBySystemAndMeasurement
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_unit_by_system_and_measurement_using_get(data_partition_id, unit_system_name, ancestry, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str data_partition_id: tenant (required)
        :param str unit_system_name: unitSystemName (required)
        :param str ancestry: ancestry (required)
        :return: Unit
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_unit_by_system_and_measurement_using_get_with_http_info(data_partition_id, unit_system_name, ancestry, **kwargs)
        else:
            (data) = self.get_unit_by_system_and_measurement_using_get_with_http_info(data_partition_id, unit_system_name, ancestry, **kwargs)
            return data

    def get_unit_by_system_and_measurement_using_get_with_http_info(self, data_partition_id, unit_system_name, ancestry, **kwargs):
        """
        getUnitBySystemAndMeasurement
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_unit_by_system_and_measurement_using_get_with_http_info(data_partition_id, unit_system_name, ancestry, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str data_partition_id: tenant (required)
        :param str unit_system_name: unitSystemName (required)
        :param str ancestry: ancestry (required)
        :return: Unit
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data_partition_id', 'unit_system_name', 'ancestry']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_unit_by_system_and_measurement_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data_partition_id' is set
        if ('data_partition_id' not in params) or (params['data_partition_id'] is None):
            raise ValueError("Missing the required parameter `data_partition_id` when calling `get_unit_by_system_and_measurement_using_get`")
        # verify the required parameter 'unit_system_name' is set
        if ('unit_system_name' not in params) or (params['unit_system_name'] is None):
            raise ValueError("Missing the required parameter `unit_system_name` when calling `get_unit_by_system_and_measurement_using_get`")
        # verify the required parameter 'ancestry' is set
        if ('ancestry' not in params) or (params['ancestry'] is None):
            raise ValueError("Missing the required parameter `ancestry` when calling `get_unit_by_system_and_measurement_using_get`")


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'unit_system_name' in params:
            query_params.append(('unitSystemName', params['unit_system_name']))
        if 'ancestry' in params:
            query_params.append(('ancestry', params['ancestry']))

        header_params = {}
        if 'data_partition_id' in params:
            header_params['data-partition-id'] = params['data_partition_id']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer Authorization']

        return self.api_client.call_api('/v3/unit/unitsystem', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Unit',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_unit_maps_using_get(self, data_partition_id, **kwargs):
        """
        getUnitMaps
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_unit_maps_using_get(data_partition_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str data_partition_id: tenant (required)
        :param int offset: offset
        :param int limit: limit
        :return: QueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_unit_maps_using_get_with_http_info(data_partition_id, **kwargs)
        else:
            (data) = self.get_unit_maps_using_get_with_http_info(data_partition_id, **kwargs)
            return data

    def get_unit_maps_using_get_with_http_info(self, data_partition_id, **kwargs):
        """
        getUnitMaps
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_unit_maps_using_get_with_http_info(data_partition_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str data_partition_id: tenant (required)
        :param int offset: offset
        :param int limit: limit
        :return: QueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data_partition_id', 'offset', 'limit']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_unit_maps_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data_partition_id' is set
        if ('data_partition_id' not in params) or (params['data_partition_id'] is None):
            raise ValueError("Missing the required parameter `data_partition_id` when calling `get_unit_maps_using_get`")


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))
        if 'limit' in params:
            query_params.append(('limit', params['limit']))

        header_params = {}
        if 'data_partition_id' in params:
            header_params['data-partition-id'] = params['data_partition_id']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer Authorization']

        return self.api_client.call_api('/v3/unit/maps', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='QueryResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_unit_system_info_list_using_get(self, data_partition_id, **kwargs):
        """
        getUnitSystemInfoList
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_unit_system_info_list_using_get(data_partition_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str data_partition_id: tenant (required)
        :param int offset: offset
        :param int limit: limit
        :return: UnitSystemInfoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_unit_system_info_list_using_get_with_http_info(data_partition_id, **kwargs)
        else:
            (data) = self.get_unit_system_info_list_using_get_with_http_info(data_partition_id, **kwargs)
            return data

    def get_unit_system_info_list_using_get_with_http_info(self, data_partition_id, **kwargs):
        """
        getUnitSystemInfoList
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_unit_system_info_list_using_get_with_http_info(data_partition_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str data_partition_id: tenant (required)
        :param int offset: offset
        :param int limit: limit
        :return: UnitSystemInfoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data_partition_id', 'offset', 'limit']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_unit_system_info_list_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data_partition_id' is set
        if ('data_partition_id' not in params) or (params['data_partition_id'] is None):
            raise ValueError("Missing the required parameter `data_partition_id` when calling `get_unit_system_info_list_using_get`")


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))
        if 'limit' in params:
            query_params.append(('limit', params['limit']))

        header_params = {}
        if 'data_partition_id' in params:
            header_params['data-partition-id'] = params['data_partition_id']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer Authorization']

        return self.api_client.call_api('/v3/unitsystem/list', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='UnitSystemInfoResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_unit_system_using_get(self, data_partition_id, name, **kwargs):
        """
        getUnitSystem
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_unit_system_using_get(data_partition_id, name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str data_partition_id: tenant (required)
        :param str name: name (required)
        :param int offset: offset
        :param int limit: limit
        :return: UnitSystem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_unit_system_using_get_with_http_info(data_partition_id, name, **kwargs)
        else:
            (data) = self.get_unit_system_using_get_with_http_info(data_partition_id, name, **kwargs)
            return data

    def get_unit_system_using_get_with_http_info(self, data_partition_id, name, **kwargs):
        """
        getUnitSystem
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_unit_system_using_get_with_http_info(data_partition_id, name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str data_partition_id: tenant (required)
        :param str name: name (required)
        :param int offset: offset
        :param int limit: limit
        :return: UnitSystem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data_partition_id', 'name', 'offset', 'limit']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_unit_system_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data_partition_id' is set
        if ('data_partition_id' not in params) or (params['data_partition_id'] is None):
            raise ValueError("Missing the required parameter `data_partition_id` when calling `get_unit_system_using_get`")
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_unit_system_using_get`")


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))
        if 'offset' in params:
            query_params.append(('offset', params['offset']))
        if 'limit' in params:
            query_params.append(('limit', params['limit']))

        header_params = {}
        if 'data_partition_id' in params:
            header_params['data-partition-id'] = params['data_partition_id']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer Authorization']

        return self.api_client.call_api('/v3/unitsystem', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='UnitSystem',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_units_by_measurement_using_get(self, data_partition_id, ancestry, **kwargs):
        """
        getUnitsByMeasurement
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_units_by_measurement_using_get(data_partition_id, ancestry, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str data_partition_id: tenant (required)
        :param str ancestry: ancestry (required)
        :return: QueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_units_by_measurement_using_get_with_http_info(data_partition_id, ancestry, **kwargs)
        else:
            (data) = self.get_units_by_measurement_using_get_with_http_info(data_partition_id, ancestry, **kwargs)
            return data

    def get_units_by_measurement_using_get_with_http_info(self, data_partition_id, ancestry, **kwargs):
        """
        getUnitsByMeasurement
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_units_by_measurement_using_get_with_http_info(data_partition_id, ancestry, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str data_partition_id: tenant (required)
        :param str ancestry: ancestry (required)
        :return: QueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data_partition_id', 'ancestry']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_units_by_measurement_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data_partition_id' is set
        if ('data_partition_id' not in params) or (params['data_partition_id'] is None):
            raise ValueError("Missing the required parameter `data_partition_id` when calling `get_units_by_measurement_using_get`")
        # verify the required parameter 'ancestry' is set
        if ('ancestry' not in params) or (params['ancestry'] is None):
            raise ValueError("Missing the required parameter `ancestry` when calling `get_units_by_measurement_using_get`")


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ancestry' in params:
            query_params.append(('ancestry', params['ancestry']))

        header_params = {}
        if 'data_partition_id' in params:
            header_params['data-partition-id'] = params['data_partition_id']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer Authorization']

        return self.api_client.call_api('/v3/unit/measurement', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='QueryResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_units_by_symbol_using_get(self, data_partition_id, symbol, **kwargs):
        """
        getUnitsBySymbol
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_units_by_symbol_using_get(data_partition_id, symbol, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str data_partition_id: tenant (required)
        :param str symbol: symbol (required)
        :return: QueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_units_by_symbol_using_get_with_http_info(data_partition_id, symbol, **kwargs)
        else:
            (data) = self.get_units_by_symbol_using_get_with_http_info(data_partition_id, symbol, **kwargs)
            return data

    def get_units_by_symbol_using_get_with_http_info(self, data_partition_id, symbol, **kwargs):
        """
        getUnitsBySymbol
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_units_by_symbol_using_get_with_http_info(data_partition_id, symbol, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str data_partition_id: tenant (required)
        :param str symbol: symbol (required)
        :return: QueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data_partition_id', 'symbol']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_units_by_symbol_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data_partition_id' is set
        if ('data_partition_id' not in params) or (params['data_partition_id'] is None):
            raise ValueError("Missing the required parameter `data_partition_id` when calling `get_units_by_symbol_using_get`")
        # verify the required parameter 'symbol' is set
        if ('symbol' not in params) or (params['symbol'] is None):
            raise ValueError("Missing the required parameter `symbol` when calling `get_units_by_symbol_using_get`")


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'symbol' in params:
            query_params.append(('symbol', params['symbol']))

        header_params = {}
        if 'data_partition_id' in params:
            header_params['data-partition-id'] = params['data_partition_id']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer Authorization']

        return self.api_client.call_api('/v3/unit/symbols', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='QueryResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_units_using_get(self, data_partition_id, **kwargs):
        """
        getUnits
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_units_using_get(data_partition_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str data_partition_id: tenant (required)
        :param int offset: offset
        :param int limit: limit
        :return: QueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_units_using_get_with_http_info(data_partition_id, **kwargs)
        else:
            (data) = self.get_units_using_get_with_http_info(data_partition_id, **kwargs)
            return data

    def get_units_using_get_with_http_info(self, data_partition_id, **kwargs):
        """
        getUnits
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_units_using_get_with_http_info(data_partition_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str data_partition_id: tenant (required)
        :param int offset: offset
        :param int limit: limit
        :return: QueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data_partition_id', 'offset', 'limit']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_units_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data_partition_id' is set
        if ('data_partition_id' not in params) or (params['data_partition_id'] is None):
            raise ValueError("Missing the required parameter `data_partition_id` when calling `get_units_using_get`")


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))
        if 'limit' in params:
            query_params.append(('limit', params['limit']))

        header_params = {}
        if 'data_partition_id' in params:
            header_params['data-partition-id'] = params['data_partition_id']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer Authorization']

        return self.api_client.call_api('/v3/unit', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='QueryResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def post_conversion_abcd_using_post(self, data_partition_id, request, **kwargs):
        """
        postConversionABCD
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_conversion_abcd_using_post(data_partition_id, request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str data_partition_id: tenant (required)
        :param ConversionABCDRequest request: request (required)
        :return: ConversionResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.post_conversion_abcd_using_post_with_http_info(data_partition_id, request, **kwargs)
        else:
            (data) = self.post_conversion_abcd_using_post_with_http_info(data_partition_id, request, **kwargs)
            return data

    def post_conversion_abcd_using_post_with_http_info(self, data_partition_id, request, **kwargs):
        """
        postConversionABCD
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_conversion_abcd_using_post_with_http_info(data_partition_id, request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str data_partition_id: tenant (required)
        :param ConversionABCDRequest request: request (required)
        :return: ConversionResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data_partition_id', 'request']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_conversion_abcd_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data_partition_id' is set
        if ('data_partition_id' not in params) or (params['data_partition_id'] is None):
            raise ValueError("Missing the required parameter `data_partition_id` when calling `post_conversion_abcd_using_post`")
        # verify the required parameter 'request' is set
        if ('request' not in params) or (params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `post_conversion_abcd_using_post`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'data_partition_id' in params:
            header_params['data-partition-id'] = params['data_partition_id']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer Authorization']

        return self.api_client.call_api('/v3/conversion/abcd', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ConversionResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def post_conversion_scale_offset_using_post(self, data_partition_id, request, **kwargs):
        """
        postConversionScaleOffset
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_conversion_scale_offset_using_post(data_partition_id, request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str data_partition_id: tenant (required)
        :param ConversionScaleOffsetRequest request: request (required)
        :return: ConversionResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.post_conversion_scale_offset_using_post_with_http_info(data_partition_id, request, **kwargs)
        else:
            (data) = self.post_conversion_scale_offset_using_post_with_http_info(data_partition_id, request, **kwargs)
            return data

    def post_conversion_scale_offset_using_post_with_http_info(self, data_partition_id, request, **kwargs):
        """
        postConversionScaleOffset
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_conversion_scale_offset_using_post_with_http_info(data_partition_id, request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str data_partition_id: tenant (required)
        :param ConversionScaleOffsetRequest request: request (required)
        :return: ConversionResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data_partition_id', 'request']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_conversion_scale_offset_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data_partition_id' is set
        if ('data_partition_id' not in params) or (params['data_partition_id'] is None):
            raise ValueError("Missing the required parameter `data_partition_id` when calling `post_conversion_scale_offset_using_post`")
        # verify the required parameter 'request' is set
        if ('request' not in params) or (params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `post_conversion_scale_offset_using_post`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'data_partition_id' in params:
            header_params['data-partition-id'] = params['data_partition_id']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer Authorization']

        return self.api_client.call_api('/v3/conversion/scale', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ConversionResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def post_measurement_using_post(self, data_partition_id, request, **kwargs):
        """
        postMeasurement
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_measurement_using_post(data_partition_id, request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str data_partition_id: tenant (required)
        :param MeasurementRequest request: request (required)
        :return: Measurement
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.post_measurement_using_post_with_http_info(data_partition_id, request, **kwargs)
        else:
            (data) = self.post_measurement_using_post_with_http_info(data_partition_id, request, **kwargs)
            return data

    def post_measurement_using_post_with_http_info(self, data_partition_id, request, **kwargs):
        """
        postMeasurement
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_measurement_using_post_with_http_info(data_partition_id, request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str data_partition_id: tenant (required)
        :param MeasurementRequest request: request (required)
        :return: Measurement
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data_partition_id', 'request']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_measurement_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data_partition_id' is set
        if ('data_partition_id' not in params) or (params['data_partition_id'] is None):
            raise ValueError("Missing the required parameter `data_partition_id` when calling `post_measurement_using_post`")
        # verify the required parameter 'request' is set
        if ('request' not in params) or (params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `post_measurement_using_post`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'data_partition_id' in params:
            header_params['data-partition-id'] = params['data_partition_id']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer Authorization']

        return self.api_client.call_api('/v3/measurement', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Measurement',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def post_preferred_units_by_measurement_using_post(self, data_partition_id, request, **kwargs):
        """
        postPreferredUnitsByMeasurement
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_preferred_units_by_measurement_using_post(data_partition_id, request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str data_partition_id: tenant (required)
        :param MeasurementRequest request: request (required)
        :return: QueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.post_preferred_units_by_measurement_using_post_with_http_info(data_partition_id, request, **kwargs)
        else:
            (data) = self.post_preferred_units_by_measurement_using_post_with_http_info(data_partition_id, request, **kwargs)
            return data

    def post_preferred_units_by_measurement_using_post_with_http_info(self, data_partition_id, request, **kwargs):
        """
        postPreferredUnitsByMeasurement
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_preferred_units_by_measurement_using_post_with_http_info(data_partition_id, request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str data_partition_id: tenant (required)
        :param MeasurementRequest request: request (required)
        :return: QueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data_partition_id', 'request']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_preferred_units_by_measurement_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data_partition_id' is set
        if ('data_partition_id' not in params) or (params['data_partition_id'] is None):
            raise ValueError("Missing the required parameter `data_partition_id` when calling `post_preferred_units_by_measurement_using_post`")
        # verify the required parameter 'request' is set
        if ('request' not in params) or (params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `post_preferred_units_by_measurement_using_post`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'data_partition_id' in params:
            header_params['data-partition-id'] = params['data_partition_id']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer Authorization']

        return self.api_client.call_api('/v3/unit/measurement/preferred', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='QueryResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def post_search_measurements_using_post(self, data_partition_id, request, **kwargs):
        """
        postSearchMeasurements
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_search_measurements_using_post(data_partition_id, request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str data_partition_id: tenant (required)
        :param SearchRequest request: request (required)
        :param int offset: offset
        :param int limit: limit
        :return: QueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.post_search_measurements_using_post_with_http_info(data_partition_id, request, **kwargs)
        else:
            (data) = self.post_search_measurements_using_post_with_http_info(data_partition_id, request, **kwargs)
            return data

    def post_search_measurements_using_post_with_http_info(self, data_partition_id, request, **kwargs):
        """
        postSearchMeasurements
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_search_measurements_using_post_with_http_info(data_partition_id, request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str data_partition_id: tenant (required)
        :param SearchRequest request: request (required)
        :param int offset: offset
        :param int limit: limit
        :return: QueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data_partition_id', 'request', 'offset', 'limit']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_search_measurements_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data_partition_id' is set
        if ('data_partition_id' not in params) or (params['data_partition_id'] is None):
            raise ValueError("Missing the required parameter `data_partition_id` when calling `post_search_measurements_using_post`")
        # verify the required parameter 'request' is set
        if ('request' not in params) or (params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `post_search_measurements_using_post`")


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))
        if 'limit' in params:
            query_params.append(('limit', params['limit']))

        header_params = {}
        if 'data_partition_id' in params:
            header_params['data-partition-id'] = params['data_partition_id']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer Authorization']

        return self.api_client.call_api('/v3/measurement/search', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='QueryResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def post_search_units_using_post(self, data_partition_id, request, **kwargs):
        """
        postSearchUnits
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_search_units_using_post(data_partition_id, request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str data_partition_id: tenant (required)
        :param SearchRequest request: request (required)
        :param int offset: offset
        :param int limit: limit
        :return: QueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.post_search_units_using_post_with_http_info(data_partition_id, request, **kwargs)
        else:
            (data) = self.post_search_units_using_post_with_http_info(data_partition_id, request, **kwargs)
            return data

    def post_search_units_using_post_with_http_info(self, data_partition_id, request, **kwargs):
        """
        postSearchUnits
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_search_units_using_post_with_http_info(data_partition_id, request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str data_partition_id: tenant (required)
        :param SearchRequest request: request (required)
        :param int offset: offset
        :param int limit: limit
        :return: QueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data_partition_id', 'request', 'offset', 'limit']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_search_units_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data_partition_id' is set
        if ('data_partition_id' not in params) or (params['data_partition_id'] is None):
            raise ValueError("Missing the required parameter `data_partition_id` when calling `post_search_units_using_post`")
        # verify the required parameter 'request' is set
        if ('request' not in params) or (params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `post_search_units_using_post`")


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))
        if 'limit' in params:
            query_params.append(('limit', params['limit']))

        header_params = {}
        if 'data_partition_id' in params:
            header_params['data-partition-id'] = params['data_partition_id']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer Authorization']

        return self.api_client.call_api('/v3/unit/search', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='QueryResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def post_search_using_post(self, data_partition_id, request, **kwargs):
        """
        postSearch
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_search_using_post(data_partition_id, request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str data_partition_id: tenant (required)
        :param SearchRequest request: request (required)
        :param int offset: offset
        :param int limit: limit
        :return: QueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.post_search_using_post_with_http_info(data_partition_id, request, **kwargs)
        else:
            (data) = self.post_search_using_post_with_http_info(data_partition_id, request, **kwargs)
            return data

    def post_search_using_post_with_http_info(self, data_partition_id, request, **kwargs):
        """
        postSearch
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_search_using_post_with_http_info(data_partition_id, request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str data_partition_id: tenant (required)
        :param SearchRequest request: request (required)
        :param int offset: offset
        :param int limit: limit
        :return: QueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data_partition_id', 'request', 'offset', 'limit']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_search_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data_partition_id' is set
        if ('data_partition_id' not in params) or (params['data_partition_id'] is None):
            raise ValueError("Missing the required parameter `data_partition_id` when calling `post_search_using_post`")
        # verify the required parameter 'request' is set
        if ('request' not in params) or (params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `post_search_using_post`")


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))
        if 'limit' in params:
            query_params.append(('limit', params['limit']))

        header_params = {}
        if 'data_partition_id' in params:
            header_params['data-partition-id'] = params['data_partition_id']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer Authorization']

        return self.api_client.call_api('/v3/catalog/search', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='QueryResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def post_unit_by_system_and_measurement_using_post(self, data_partition_id, unit_system_name, request, **kwargs):
        """
        postUnitBySystemAndMeasurement
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_unit_by_system_and_measurement_using_post(data_partition_id, unit_system_name, request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str data_partition_id: tenant (required)
        :param str unit_system_name: unitSystemName (required)
        :param MeasurementRequest request: request (required)
        :return: Unit
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.post_unit_by_system_and_measurement_using_post_with_http_info(data_partition_id, unit_system_name, request, **kwargs)
        else:
            (data) = self.post_unit_by_system_and_measurement_using_post_with_http_info(data_partition_id, unit_system_name, request, **kwargs)
            return data

    def post_unit_by_system_and_measurement_using_post_with_http_info(self, data_partition_id, unit_system_name, request, **kwargs):
        """
        postUnitBySystemAndMeasurement
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_unit_by_system_and_measurement_using_post_with_http_info(data_partition_id, unit_system_name, request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str data_partition_id: tenant (required)
        :param str unit_system_name: unitSystemName (required)
        :param MeasurementRequest request: request (required)
        :return: Unit
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data_partition_id', 'unit_system_name', 'request']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_unit_by_system_and_measurement_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data_partition_id' is set
        if ('data_partition_id' not in params) or (params['data_partition_id'] is None):
            raise ValueError("Missing the required parameter `data_partition_id` when calling `post_unit_by_system_and_measurement_using_post`")
        # verify the required parameter 'unit_system_name' is set
        if ('unit_system_name' not in params) or (params['unit_system_name'] is None):
            raise ValueError("Missing the required parameter `unit_system_name` when calling `post_unit_by_system_and_measurement_using_post`")
        # verify the required parameter 'request' is set
        if ('request' not in params) or (params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `post_unit_by_system_and_measurement_using_post`")


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'unit_system_name' in params:
            query_params.append(('unitSystemName', params['unit_system_name']))

        header_params = {}
        if 'data_partition_id' in params:
            header_params['data-partition-id'] = params['data_partition_id']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer Authorization']

        return self.api_client.call_api('/v3/unit/unitsystem', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Unit',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def post_unit_system_using_post(self, data_partition_id, request, **kwargs):
        """
        postUnitSystem
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_unit_system_using_post(data_partition_id, request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str data_partition_id: tenant (required)
        :param UnitSystemRequest request: request (required)
        :param int offset: offset
        :param int limit: limit
        :return: UnitSystem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.post_unit_system_using_post_with_http_info(data_partition_id, request, **kwargs)
        else:
            (data) = self.post_unit_system_using_post_with_http_info(data_partition_id, request, **kwargs)
            return data

    def post_unit_system_using_post_with_http_info(self, data_partition_id, request, **kwargs):
        """
        postUnitSystem
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_unit_system_using_post_with_http_info(data_partition_id, request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str data_partition_id: tenant (required)
        :param UnitSystemRequest request: request (required)
        :param int offset: offset
        :param int limit: limit
        :return: UnitSystem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data_partition_id', 'request', 'offset', 'limit']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_unit_system_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data_partition_id' is set
        if ('data_partition_id' not in params) or (params['data_partition_id'] is None):
            raise ValueError("Missing the required parameter `data_partition_id` when calling `post_unit_system_using_post`")
        # verify the required parameter 'request' is set
        if ('request' not in params) or (params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `post_unit_system_using_post`")


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))
        if 'limit' in params:
            query_params.append(('limit', params['limit']))

        header_params = {}
        if 'data_partition_id' in params:
            header_params['data-partition-id'] = params['data_partition_id']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer Authorization']

        return self.api_client.call_api('/v3/unitsystem', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='UnitSystem',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def post_unit_using_post(self, data_partition_id, request, **kwargs):
        """
        postUnit
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_unit_using_post(data_partition_id, request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str data_partition_id: tenant (required)
        :param UnitRequest request: request (required)
        :return: Unit
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.post_unit_using_post_with_http_info(data_partition_id, request, **kwargs)
        else:
            (data) = self.post_unit_using_post_with_http_info(data_partition_id, request, **kwargs)
            return data

    def post_unit_using_post_with_http_info(self, data_partition_id, request, **kwargs):
        """
        postUnit
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_unit_using_post_with_http_info(data_partition_id, request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str data_partition_id: tenant (required)
        :param UnitRequest request: request (required)
        :return: Unit
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data_partition_id', 'request']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_unit_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data_partition_id' is set
        if ('data_partition_id' not in params) or (params['data_partition_id'] is None):
            raise ValueError("Missing the required parameter `data_partition_id` when calling `post_unit_using_post`")
        # verify the required parameter 'request' is set
        if ('request' not in params) or (params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `post_unit_using_post`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'data_partition_id' in params:
            header_params['data-partition-id'] = params['data_partition_id']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer Authorization']

        return self.api_client.call_api('/v3/unit', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Unit',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def post_units_by_measurement_using_post(self, data_partition_id, request, **kwargs):
        """
        postUnitsByMeasurement
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_units_by_measurement_using_post(data_partition_id, request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str data_partition_id: tenant (required)
        :param MeasurementRequest request: request (required)
        :return: QueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.post_units_by_measurement_using_post_with_http_info(data_partition_id, request, **kwargs)
        else:
            (data) = self.post_units_by_measurement_using_post_with_http_info(data_partition_id, request, **kwargs)
            return data

    def post_units_by_measurement_using_post_with_http_info(self, data_partition_id, request, **kwargs):
        """
        postUnitsByMeasurement
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_units_by_measurement_using_post_with_http_info(data_partition_id, request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str data_partition_id: tenant (required)
        :param MeasurementRequest request: request (required)
        :return: QueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data_partition_id', 'request']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_units_by_measurement_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data_partition_id' is set
        if ('data_partition_id' not in params) or (params['data_partition_id'] is None):
            raise ValueError("Missing the required parameter `data_partition_id` when calling `post_units_by_measurement_using_post`")
        # verify the required parameter 'request' is set
        if ('request' not in params) or (params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `post_units_by_measurement_using_post`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'data_partition_id' in params:
            header_params['data-partition-id'] = params['data_partition_id']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer Authorization']

        return self.api_client.call_api('/v3/unit/measurement', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='QueryResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
